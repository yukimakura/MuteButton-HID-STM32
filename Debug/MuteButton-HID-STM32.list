
MuteButton-HID-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007170  08007170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071e8  080071e8  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  080071e8  080071e8  000171e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071f0  080071f0  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071f0  080071f0  000171f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071f4  080071f4  000171f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  080071f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  20000108  08007300  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  08007300  00020bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e3a  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f88  00000000  00000000  00032f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00035f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00036f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019124  00000000  00000000  00037eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014878  00000000  00000000  00050fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f764  00000000  00000000  00065854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4fb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000447c  00000000  00000000  000f5008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000108 	.word	0x20000108
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007158 	.word	0x08007158

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000010c 	.word	0x2000010c
 80001d4:	08007158 	.word	0x08007158

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b092      	sub	sp, #72	; 0x48
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fa39 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f833 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f899 	bl	8000620 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ee:	f006 f997 	bl	8006820 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t res[USBD_CUSTOMHID_OUTREPORT_BUF_SIZE] = { 0x44,0x55};
 80004f2:	f245 5344 	movw	r3, #21828	; 0x5544
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	223c      	movs	r2, #60	; 0x3c
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f006 fe21 	bl	8007148 <memset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10){
	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8000506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800050a:	4810      	ldr	r0, [pc, #64]	; (800054c <main+0x70>)
 800050c:	f000 fcf0 	bl	8000ef0 <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d007      	beq.n	8000526 <main+0x4a>
	  		  res[0] = 'S';
 8000516:	2353      	movs	r3, #83	; 0x53
 8000518:	713b      	strb	r3, [r7, #4]
	  		  USBD_CUSTOM_HID_SendReport_FS(res,USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2140      	movs	r1, #64	; 0x40
 800051e:	4618      	mov	r0, r3
 8000520:	f006 f9d2 	bl	80068c8 <USBD_CUSTOM_HID_SendReport_FS>
 8000524:	e006      	b.n	8000534 <main+0x58>
	  	  }else{
	  		  res[0] = 'M';
 8000526:	234d      	movs	r3, #77	; 0x4d
 8000528:	713b      	strb	r3, [r7, #4]
	  		  USBD_CUSTOM_HID_SendReport_FS(res,USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2140      	movs	r1, #64	; 0x40
 800052e:	4618      	mov	r0, r3
 8000530:	f006 f9ca 	bl	80068c8 <USBD_CUSTOM_HID_SendReport_FS>
	  	  }
	  	  for(int i = 0;i < 10000;i++);
 8000534:	2300      	movs	r3, #0
 8000536:	647b      	str	r3, [r7, #68]	; 0x44
 8000538:	e002      	b.n	8000540 <main+0x64>
 800053a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800053c:	3301      	adds	r3, #1
 800053e:	647b      	str	r3, [r7, #68]	; 0x44
 8000540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000542:	f242 720f 	movw	r2, #9999	; 0x270f
 8000546:	4293      	cmp	r3, r2
 8000548:	ddf7      	ble.n	800053a <main+0x5e>
	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 800054a:	e7dc      	b.n	8000506 <main+0x2a>
 800054c:	40020000 	.word	0x40020000

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fdf2 	bl	8007148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <SystemClock_Config+0xc8>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a26      	ldr	r2, [pc, #152]	; (8000618 <SystemClock_Config+0xc8>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b24      	ldr	r3, [pc, #144]	; (8000618 <SystemClock_Config+0xc8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <SystemClock_Config+0xcc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a20      	ldr	r2, [pc, #128]	; (800061c <SystemClock_Config+0xcc>)
 800059a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <SystemClock_Config+0xcc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005c0:	2310      	movs	r3, #16
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005c4:	23c0      	movs	r3, #192	; 0xc0
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 ff21 	bl	800241c <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e0:	f000 f895 	bl	800070e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 f984 	bl	800290c <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800060a:	f000 f880 	bl	800070e <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <MX_GPIO_Init+0xc4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a29      	ldr	r2, [pc, #164]	; (80006e4 <MX_GPIO_Init+0xc4>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <MX_GPIO_Init+0xc4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <MX_GPIO_Init+0xc4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <MX_GPIO_Init+0xc4>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <MX_GPIO_Init+0xc4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	481c      	ldr	r0, [pc, #112]	; (80006e8 <MX_GPIO_Init+0xc8>)
 8000676:	f000 fc53 	bl	8000f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000680:	481a      	ldr	r0, [pc, #104]	; (80006ec <MX_GPIO_Init+0xcc>)
 8000682:	f000 fc4d 	bl	8000f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4619      	mov	r1, r3
 800069e:	4812      	ldr	r0, [pc, #72]	; (80006e8 <MX_GPIO_Init+0xc8>)
 80006a0:	f000 faa2 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10;
 80006a4:	f240 4301 	movw	r3, #1025	; 0x401
 80006a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <MX_GPIO_Init+0xcc>)
 80006ba:	f000 fa95 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4619      	mov	r1, r3
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_GPIO_Init+0xcc>)
 80006d8:	f000 fa86 	bl	8000be8 <HAL_GPIO_Init>

}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020800 	.word	0x40020800
 80006ec:	40020000 	.word	0x40020000

080006f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000700:	d101      	bne.n	8000706 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000702:	f000 f94b 	bl	800099c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000712:	b672      	cpsid	i
}
 8000714:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000716:	e7fe      	b.n	8000716 <Error_Handler+0x8>

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <HAL_MspInit+0x4c>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <HAL_MspInit+0x4c>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6453      	str	r3, [r2, #68]	; 0x44
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <HAL_MspInit+0x4c>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_MspInit+0x4c>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_MspInit+0x4c>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_MspInit+0x4c>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08e      	sub	sp, #56	; 0x38
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	4b34      	ldr	r3, [pc, #208]	; (8000850 <HAL_InitTick+0xe8>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a33      	ldr	r2, [pc, #204]	; (8000850 <HAL_InitTick+0xe8>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b31      	ldr	r3, [pc, #196]	; (8000850 <HAL_InitTick+0xe8>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000794:	f107 0210 	add.w	r2, r7, #16
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fa80 	bl	8002ca4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007a4:	6a3b      	ldr	r3, [r7, #32]
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d103      	bne.n	80007b6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007ae:	f002 fa65 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 80007b2:	6378      	str	r0, [r7, #52]	; 0x34
 80007b4:	e004      	b.n	80007c0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007b6:	f002 fa61 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 80007ba:	4603      	mov	r3, r0
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c2:	4a24      	ldr	r2, [pc, #144]	; (8000854 <HAL_InitTick+0xec>)
 80007c4:	fba2 2303 	umull	r2, r3, r2, r3
 80007c8:	0c9b      	lsrs	r3, r3, #18
 80007ca:	3b01      	subs	r3, #1
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80007ce:	4b22      	ldr	r3, [pc, #136]	; (8000858 <HAL_InitTick+0xf0>)
 80007d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <HAL_InitTick+0xf0>)
 80007d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007dc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80007de:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <HAL_InitTick+0xf0>)
 80007e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <HAL_InitTick+0xf0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <HAL_InitTick+0xf0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <HAL_InitTick+0xf0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80007f6:	4818      	ldr	r0, [pc, #96]	; (8000858 <HAL_InitTick+0xf0>)
 80007f8:	f002 fa86 	bl	8002d08 <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000802:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000806:	2b00      	cmp	r3, #0
 8000808:	d11b      	bne.n	8000842 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800080a:	4813      	ldr	r0, [pc, #76]	; (8000858 <HAL_InitTick+0xf0>)
 800080c:	f002 fad6 	bl	8002dbc <HAL_TIM_Base_Start_IT>
 8000810:	4603      	mov	r3, r0
 8000812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000816:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800081a:	2b00      	cmp	r3, #0
 800081c:	d111      	bne.n	8000842 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800081e:	201c      	movs	r0, #28
 8000820:	f000 f9d4 	bl	8000bcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b0f      	cmp	r3, #15
 8000828:	d808      	bhi.n	800083c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800082a:	2200      	movs	r2, #0
 800082c:	6879      	ldr	r1, [r7, #4]
 800082e:	201c      	movs	r0, #28
 8000830:	f000 f9b0 	bl	8000b94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000834:	4a09      	ldr	r2, [pc, #36]	; (800085c <HAL_InitTick+0xf4>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	e002      	b.n	8000842 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000842:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000846:	4618      	mov	r0, r3
 8000848:	3738      	adds	r7, #56	; 0x38
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	431bde83 	.word	0x431bde83
 8000858:	20000124 	.word	0x20000124
 800085c:	20000004 	.word	0x20000004

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
	...

080008b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <TIM2_IRQHandler+0x10>)
 80008be:	f002 fadf 	bl	8002e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000124 	.word	0x20000124

080008cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <OTG_FS_IRQHandler+0x10>)
 80008d2:	f000 fc8e 	bl	80011f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000650 	.word	0x20000650

080008e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <SystemInit+0x20>)
 80008e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <SystemInit+0x20>)
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800093c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800090a:	490e      	ldr	r1, [pc, #56]	; (8000944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800090c:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000920:	4c0b      	ldr	r4, [pc, #44]	; (8000950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800092e:	f7ff ffd7 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000932:	f006 fbe5 	bl	8007100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000936:	f7ff fdd1 	bl	80004dc <main>
  bx  lr    
 800093a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800093c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000948:	080071f8 	.word	0x080071f8
  ldr r2, =_sbss
 800094c:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000950:	20000bb4 	.word	0x20000bb4

08000954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_IRQHandler>
	...

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_Init+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <HAL_Init+0x40>)
 8000962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_Init+0x40>)
 800096e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x40>)
 800097a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f8fc 	bl	8000b7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	200f      	movs	r0, #15
 8000988:	f7ff feee 	bl	8000768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f7ff fec4 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023c00 	.word	0x40023c00

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000008 	.word	0x20000008
 80009c0:	2000016c 	.word	0x2000016c

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	2000016c 	.word	0x2000016c

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff ffee 	bl	80009c4 <HAL_GetTick>
 80009e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009f4:	d005      	beq.n	8000a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_Delay+0x44>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a02:	bf00      	nop
 8000a04:	f7ff ffde 	bl	80009c4 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <HAL_Delay+0x28>
  {
  }
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008

08000a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <__NVIC_GetPriorityGrouping+0x18>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	f003 0307 	and.w	r3, r3, #7
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4907      	ldr	r1, [pc, #28]	; (8000ac0 <__NVIC_EnableIRQ+0x38>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	; (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	; (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
         );
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	; 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff4c 	bl	8000a24 <__NVIC_SetPriorityGrouping>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
 8000ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba6:	f7ff ff61 	bl	8000a6c <__NVIC_GetPriorityGrouping>
 8000baa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	68b9      	ldr	r1, [r7, #8]
 8000bb0:	6978      	ldr	r0, [r7, #20]
 8000bb2:	f7ff ffb1 	bl	8000b18 <NVIC_EncodePriority>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ff80 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000bc4:	bf00      	nop
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff54 	bl	8000a88 <__NVIC_EnableIRQ>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
 8000c02:	e159      	b.n	8000eb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c04:	2201      	movs	r2, #1
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f040 8148 	bne.w	8000eb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 0303 	and.w	r3, r3, #3
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d005      	beq.n	8000c3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d130      	bne.n	8000c9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2203      	movs	r2, #3
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	68da      	ldr	r2, [r3, #12]
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c70:	2201      	movs	r2, #1
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	091b      	lsrs	r3, r3, #4
 8000c86:	f003 0201 	and.w	r2, r3, #1
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d017      	beq.n	8000cd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d123      	bne.n	8000d2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	08da      	lsrs	r2, r3, #3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3208      	adds	r2, #8
 8000cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	691a      	ldr	r2, [r3, #16]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	08da      	lsrs	r2, r3, #3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3208      	adds	r2, #8
 8000d26:	69b9      	ldr	r1, [r7, #24]
 8000d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0203 	and.w	r2, r3, #3
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f000 80a2 	beq.w	8000eb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b57      	ldr	r3, [pc, #348]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a56      	ldr	r2, [pc, #344]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b54      	ldr	r3, [pc, #336]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d8a:	4a52      	ldr	r2, [pc, #328]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3302      	adds	r3, #2
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a49      	ldr	r2, [pc, #292]	; (8000ed8 <HAL_GPIO_Init+0x2f0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d019      	beq.n	8000dea <HAL_GPIO_Init+0x202>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a48      	ldr	r2, [pc, #288]	; (8000edc <HAL_GPIO_Init+0x2f4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d013      	beq.n	8000de6 <HAL_GPIO_Init+0x1fe>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a47      	ldr	r2, [pc, #284]	; (8000ee0 <HAL_GPIO_Init+0x2f8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d00d      	beq.n	8000de2 <HAL_GPIO_Init+0x1fa>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a46      	ldr	r2, [pc, #280]	; (8000ee4 <HAL_GPIO_Init+0x2fc>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d007      	beq.n	8000dde <HAL_GPIO_Init+0x1f6>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a45      	ldr	r2, [pc, #276]	; (8000ee8 <HAL_GPIO_Init+0x300>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d101      	bne.n	8000dda <HAL_GPIO_Init+0x1f2>
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	e008      	b.n	8000dec <HAL_GPIO_Init+0x204>
 8000dda:	2307      	movs	r3, #7
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x204>
 8000dde:	2303      	movs	r3, #3
 8000de0:	e004      	b.n	8000dec <HAL_GPIO_Init+0x204>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e002      	b.n	8000dec <HAL_GPIO_Init+0x204>
 8000de6:	2301      	movs	r3, #1
 8000de8:	e000      	b.n	8000dec <HAL_GPIO_Init+0x204>
 8000dea:	2300      	movs	r3, #0
 8000dec:	69fa      	ldr	r2, [r7, #28]
 8000dee:	f002 0203 	and.w	r2, r2, #3
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	4093      	lsls	r3, r2
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dfc:	4935      	ldr	r1, [pc, #212]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	3302      	adds	r3, #2
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e0a:	4b38      	ldr	r3, [pc, #224]	; (8000eec <HAL_GPIO_Init+0x304>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e2e:	4a2f      	ldr	r2, [pc, #188]	; (8000eec <HAL_GPIO_Init+0x304>)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e34:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <HAL_GPIO_Init+0x304>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e58:	4a24      	ldr	r2, [pc, #144]	; (8000eec <HAL_GPIO_Init+0x304>)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e5e:	4b23      	ldr	r3, [pc, #140]	; (8000eec <HAL_GPIO_Init+0x304>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e82:	4a1a      	ldr	r2, [pc, #104]	; (8000eec <HAL_GPIO_Init+0x304>)
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_GPIO_Init+0x304>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eac:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <HAL_GPIO_Init+0x304>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	61fb      	str	r3, [r7, #28]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	2b0f      	cmp	r3, #15
 8000ebc:	f67f aea2 	bls.w	8000c04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020c00 	.word	0x40020c00
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40013c00 	.word	0x40013c00

08000ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e001      	b.n	8000f12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f30:	787b      	ldrb	r3, [r7, #1]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f36:	887a      	ldrh	r2, [r7, #2]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f3c:	e003      	b.n	8000f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	041a      	lsls	r2, r3, #16
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	619a      	str	r2, [r3, #24]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f54:	b08f      	sub	sp, #60	; 0x3c
 8000f56:	af0a      	add	r7, sp, #40	; 0x28
 8000f58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e10f      	b.n	8001184 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d106      	bne.n	8000f84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f005 fdc6 	bl	8006b10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2203      	movs	r2, #3
 8000f88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fa45 	bl	8003432 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	687e      	ldr	r6, [r7, #4]
 8000fb0:	466d      	mov	r5, sp
 8000fb2:	f106 0410 	add.w	r4, r6, #16
 8000fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fc6:	1d33      	adds	r3, r6, #4
 8000fc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f002 f91c 	bl	8003208 <USB_CoreInit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d005      	beq.n	8000fe2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2202      	movs	r2, #2
 8000fda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0d0      	b.n	8001184 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 fa33 	bl	8003454 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e04a      	b.n	800108a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	333d      	adds	r3, #61	; 0x3d
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	333c      	adds	r3, #60	; 0x3c
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	b298      	uxth	r0, r3
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	3344      	adds	r3, #68	; 0x44
 8001030:	4602      	mov	r2, r0
 8001032:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	3340      	adds	r3, #64	; 0x40
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	3348      	adds	r3, #72	; 0x48
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	334c      	adds	r3, #76	; 0x4c
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	3354      	adds	r3, #84	; 0x54
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	3301      	adds	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	429a      	cmp	r2, r3
 8001092:	d3af      	bcc.n	8000ff4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e044      	b.n	8001124 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4413      	add	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	4413      	add	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	3301      	adds	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d3b5      	bcc.n	800109a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	687e      	ldr	r6, [r7, #4]
 8001136:	466d      	mov	r5, sp
 8001138:	f106 0410 	add.w	r4, r6, #16
 800113c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001144:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001148:	e885 0003 	stmia.w	r5, {r0, r1}
 800114c:	1d33      	adds	r3, r6, #4
 800114e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f002 f9cb 	bl	80034ec <USB_DevInit>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2202      	movs	r2, #2
 8001160:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e00d      	b.n	8001184 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f003 fb1a 	bl	80047b6 <USB_DevDisconnect>

  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800118c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d101      	bne.n	80011a8 <HAL_PCD_Start+0x1c>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e020      	b.n	80011ea <HAL_PCD_Start+0x5e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d109      	bne.n	80011cc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d005      	beq.n	80011cc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 f91d 	bl	8003410 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 faca 	bl	8004774 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011f2:	b590      	push	{r4, r7, lr}
 80011f4:	b08d      	sub	sp, #52	; 0x34
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f003 fb88 	bl	800491e <USB_GetMode>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	f040 848a 	bne.w	8001b2a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f003 faec 	bl	80047f8 <USB_ReadInterrupts>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8480 	beq.w	8001b28 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fad9 	bl	80047f8 <USB_ReadInterrupts>
 8001246:	4603      	mov	r3, r0
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b02      	cmp	r3, #2
 800124e:	d107      	bne.n	8001260 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f002 0202 	and.w	r2, r2, #2
 800125e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f003 fac7 	bl	80047f8 <USB_ReadInterrupts>
 800126a:	4603      	mov	r3, r0
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b10      	cmp	r3, #16
 8001272:	d161      	bne.n	8001338 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0210 	bic.w	r2, r2, #16
 8001282:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	f003 020f 	and.w	r2, r3, #15
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	3304      	adds	r3, #4
 80012a2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	0c5b      	lsrs	r3, r3, #17
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d124      	bne.n	80012fa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d035      	beq.n	8001328 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	6a38      	ldr	r0, [r7, #32]
 80012d0:	f003 f8fe 	bl	80044d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e0:	441a      	add	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	6a1a      	ldr	r2, [r3, #32]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f2:	441a      	add	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	621a      	str	r2, [r3, #32]
 80012f8:	e016      	b.n	8001328 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	0c5b      	lsrs	r3, r3, #17
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	2b06      	cmp	r3, #6
 8001304:	d110      	bne.n	8001328 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800130c:	2208      	movs	r2, #8
 800130e:	4619      	mov	r1, r3
 8001310:	6a38      	ldr	r0, [r7, #32]
 8001312:	f003 f8dd 	bl	80044d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	6a1a      	ldr	r2, [r3, #32]
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001322:	441a      	add	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	699a      	ldr	r2, [r3, #24]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0210 	orr.w	r2, r2, #16
 8001336:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f003 fa5b 	bl	80047f8 <USB_ReadInterrupts>
 8001342:	4603      	mov	r3, r0
 8001344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001348:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800134c:	f040 80a7 	bne.w	800149e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f003 fa60 	bl	800481e <USB_ReadDevAllOutEpInterrupt>
 800135e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001360:	e099      	b.n	8001496 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 808e 	beq.w	800148a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f003 fa84 	bl	8004886 <USB_ReadDevOutEPInterrupt>
 800137e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00c      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	015a      	lsls	r2, r3, #5
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	4413      	add	r3, r2
 8001392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001396:	461a      	mov	r2, r3
 8001398:	2301      	movs	r3, #1
 800139a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800139c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 feaa 	bl	80020f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00c      	beq.n	80013c8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ba:	461a      	mov	r2, r3
 80013bc:	2308      	movs	r3, #8
 80013be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 ff80 	bl	80022c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d008      	beq.n	80013e4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	015a      	lsls	r2, r3, #5
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	4413      	add	r3, r2
 80013da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013de:	461a      	mov	r2, r3
 80013e0:	2310      	movs	r3, #16
 80013e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d030      	beq.n	8001450 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f6:	2b80      	cmp	r3, #128	; 0x80
 80013f8:	d109      	bne.n	800140e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	3304      	adds	r3, #4
 8001422:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	78db      	ldrb	r3, [r3, #3]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d108      	bne.n	800143e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2200      	movs	r2, #0
 8001430:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f005 fc65 	bl	8006d08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	015a      	lsls	r2, r3, #5
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	4413      	add	r3, r2
 8001446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800144a:	461a      	mov	r2, r3
 800144c:	2302      	movs	r3, #2
 800144e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	2b00      	cmp	r3, #0
 8001458:	d008      	beq.n	800146c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	015a      	lsls	r2, r3, #5
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	4413      	add	r3, r2
 8001462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001466:	461a      	mov	r2, r3
 8001468:	2320      	movs	r3, #32
 800146a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	015a      	lsls	r2, r3, #5
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	4413      	add	r3, r2
 800147e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001482:	461a      	mov	r2, r3
 8001484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001488:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	3301      	adds	r3, #1
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	2b00      	cmp	r3, #0
 800149a:	f47f af62 	bne.w	8001362 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 f9a8 	bl	80047f8 <USB_ReadInterrupts>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014b2:	f040 80db 	bne.w	800166c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 f9c9 	bl	8004852 <USB_ReadDevAllInEpInterrupt>
 80014c0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014c6:	e0cd      	b.n	8001664 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80c2 	beq.w	8001658 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 f9ef 	bl	80048c2 <USB_ReadDevInEPInterrupt>
 80014e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d057      	beq.n	80015a0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	2201      	movs	r2, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	69f9      	ldr	r1, [r7, #28]
 800150c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001510:	4013      	ands	r3, r2
 8001512:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	015a      	lsls	r2, r3, #5
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	4413      	add	r3, r2
 800151c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001520:	461a      	mov	r2, r3
 8001522:	2301      	movs	r3, #1
 8001524:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d132      	bne.n	8001594 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	334c      	adds	r3, #76	; 0x4c
 800153e:	6819      	ldr	r1, [r3, #0]
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4403      	add	r3, r0
 800154e:	3348      	adds	r3, #72	; 0x48
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4419      	add	r1, r3
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4403      	add	r3, r0
 8001562:	334c      	adds	r3, #76	; 0x4c
 8001564:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <HAL_PCD_IRQHandler+0x3a2>
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	3354      	adds	r3, #84	; 0x54
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d108      	bne.n	8001594 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800158c:	461a      	mov	r2, r3
 800158e:	2101      	movs	r1, #1
 8001590:	f003 f9f6 	bl	8004980 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f005 fb39 	bl	8006c12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	015a      	lsls	r2, r3, #5
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b6:	461a      	mov	r2, r3
 80015b8:	2308      	movs	r3, #8
 80015ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d008      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	015a      	lsls	r2, r3, #5
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d2:	461a      	mov	r2, r3
 80015d4:	2310      	movs	r3, #16
 80015d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ee:	461a      	mov	r2, r3
 80015f0:	2340      	movs	r3, #64	; 0x40
 80015f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d023      	beq.n	8001646 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001600:	6a38      	ldr	r0, [r7, #32]
 8001602:	f002 f8d7 	bl	80037b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	3338      	adds	r3, #56	; 0x38
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	3304      	adds	r3, #4
 8001618:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	78db      	ldrb	r3, [r3, #3]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d108      	bne.n	8001634 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2200      	movs	r2, #0
 8001626:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f005 fb7c 	bl	8006d2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	015a      	lsls	r2, r3, #5
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	4413      	add	r3, r2
 800163c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001640:	461a      	mov	r2, r3
 8001642:	2302      	movs	r3, #2
 8001644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fcc3 	bl	8001fde <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	3301      	adds	r3, #1
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	085b      	lsrs	r3, r3, #1
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	2b00      	cmp	r3, #0
 8001668:	f47f af2e 	bne.w	80014c8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f003 f8c1 	bl	80047f8 <USB_ReadInterrupts>
 8001676:	4603      	mov	r3, r0
 8001678:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800167c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001680:	d122      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800169c:	2b01      	cmp	r3, #1
 800169e:	d108      	bne.n	80016b2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016a8:	2100      	movs	r1, #0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 feaa 	bl	8002404 <HAL_PCDEx_LPM_Callback>
 80016b0:	e002      	b.n	80016b8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f005 fb1a 	bl	8006cec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 f893 	bl	80047f8 <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016dc:	d112      	bne.n	8001704 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d102      	bne.n	80016f4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f005 fad6 	bl	8006ca0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001702:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f003 f875 	bl	80047f8 <USB_ReadInterrupts>
 800170e:	4603      	mov	r3, r0
 8001710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001718:	f040 80b7 	bne.w	800188a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2110      	movs	r1, #16
 8001736:	4618      	mov	r0, r3
 8001738:	f002 f83c 	bl	80037b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001740:	e046      	b.n	80017d0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	015a      	lsls	r2, r3, #5
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	4413      	add	r3, r2
 800174a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800174e:	461a      	mov	r2, r3
 8001750:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001754:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	4413      	add	r3, r2
 800175e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001766:	0151      	lsls	r1, r2, #5
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	440a      	add	r2, r1
 800176c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001770:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001774:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4413      	add	r3, r2
 800177e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001782:	461a      	mov	r2, r3
 8001784:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001788:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	4413      	add	r3, r2
 8001792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179a:	0151      	lsls	r1, r2, #5
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	440a      	add	r2, r1
 80017a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ba:	0151      	lsls	r1, r2, #5
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	440a      	add	r2, r1
 80017c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	3301      	adds	r3, #1
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d3b3      	bcc.n	8001742 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d016      	beq.n	8001824 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001806:	f043 030b 	orr.w	r3, r3, #11
 800180a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800181c:	f043 030b 	orr.w	r3, r3, #11
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	e015      	b.n	8001850 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001832:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001836:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800183a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184a:	f043 030b 	orr.w	r3, r3, #11
 800184e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800185e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001862:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001874:	461a      	mov	r2, r3
 8001876:	f003 f883 	bl	8004980 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f002 ffb2 	bl	80047f8 <USB_ReadInterrupts>
 8001894:	4603      	mov	r3, r0
 8001896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800189a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800189e:	d124      	bne.n	80018ea <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 f848 	bl	800493a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 fffd 	bl	80038ae <USB_GetDevSpeed>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681c      	ldr	r4, [r3, #0]
 80018c0:	f001 f9d0 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 80018c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	4620      	mov	r0, r4
 80018d0:	f001 fcfc 	bl	80032cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f005 f9c4 	bl	8006c62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 ff82 	bl	80047f8 <USB_ReadInterrupts>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d10a      	bne.n	8001914 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f005 f9a1 	bl	8006c46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f002 0208 	and.w	r2, r2, #8
 8001912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f002 ff6d 	bl	80047f8 <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001924:	2b80      	cmp	r3, #128	; 0x80
 8001926:	d122      	bne.n	800196e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001934:	2301      	movs	r3, #1
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
 8001938:	e014      	b.n	8001964 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d105      	bne.n	800195e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	b2db      	uxtb	r3, r3
 8001956:	4619      	mov	r1, r3
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 fb0f 	bl	8001f7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	3301      	adds	r3, #1
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196a:	429a      	cmp	r2, r3
 800196c:	d3e5      	bcc.n	800193a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f002 ff40 	bl	80047f8 <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001982:	d13b      	bne.n	80019fc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001984:	2301      	movs	r3, #1
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
 8001988:	e02b      	b.n	80019e2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	4413      	add	r3, r2
 8001992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	3340      	adds	r3, #64	; 0x40
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d115      	bne.n	80019dc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da12      	bge.n	80019dc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ba:	4613      	mov	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	333f      	adds	r3, #63	; 0x3f
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4619      	mov	r1, r3
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fad0 	bl	8001f7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	3301      	adds	r3, #1
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d3ce      	bcc.n	800198a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 fef9 	bl	80047f8 <USB_ReadInterrupts>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a10:	d155      	bne.n	8001abe <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a12:	2301      	movs	r3, #1
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
 8001a16:	e045      	b.n	8001aa4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	015a      	lsls	r2, r3, #5
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	4413      	add	r3, r2
 8001a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d12e      	bne.n	8001a9e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da2b      	bge.n	8001a9e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001a52:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d121      	bne.n	8001a9e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5e:	4613      	mov	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10a      	bne.n	8001a9e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9a:	6053      	str	r3, [r2, #4]
            break;
 8001a9c:	e007      	b.n	8001aae <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d3b4      	bcc.n	8001a18 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fe98 	bl	80047f8 <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad2:	d10a      	bne.n	8001aea <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f005 f93b 	bl	8006d50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 fe82 	bl	80047f8 <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d115      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f005 f92b 	bl	8006d6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	e000      	b.n	8001b2a <HAL_PCD_IRQHandler+0x938>
      return;
 8001b28:	bf00      	nop
    }
  }
}
 8001b2a:	3734      	adds	r7, #52	; 0x34
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd90      	pop	{r4, r7, pc}

08001b30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_PCD_SetAddress+0x1a>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e013      	b.n	8001b72 <HAL_PCD_SetAddress+0x42>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	78fa      	ldrb	r2, [r7, #3]
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 fde0 	bl	8004728 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	4608      	mov	r0, r1
 8001b84:	4611      	mov	r1, r2
 8001b86:	461a      	mov	r2, r3
 8001b88:	4603      	mov	r3, r0
 8001b8a:	70fb      	strb	r3, [r7, #3]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	803b      	strh	r3, [r7, #0]
 8001b90:	4613      	mov	r3, r2
 8001b92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	da0f      	bge.n	8001bc0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	f003 020f 	and.w	r2, r3, #15
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	3338      	adds	r3, #56	; 0x38
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	705a      	strb	r2, [r3, #1]
 8001bbe:	e00f      	b.n	8001be0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	f003 020f 	and.w	r2, r3, #15
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bec:	883a      	ldrh	r2, [r7, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	78ba      	ldrb	r2, [r7, #2]
 8001bf6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	785b      	ldrb	r3, [r3, #1]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c0a:	78bb      	ldrb	r3, [r7, #2]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d102      	bne.n	8001c16 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_PCD_EP_Open+0xaa>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e00e      	b.n	8001c42 <HAL_PCD_EP_Open+0xc8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68f9      	ldr	r1, [r7, #12]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f001 fe60 	bl	80038f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c40:	7afb      	ldrb	r3, [r7, #11]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	da0f      	bge.n	8001c7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	f003 020f 	and.w	r2, r3, #15
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	3338      	adds	r3, #56	; 0x38
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	3304      	adds	r3, #4
 8001c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	705a      	strb	r2, [r3, #1]
 8001c7c:	e00f      	b.n	8001c9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	f003 020f 	and.w	r2, r3, #15
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	3304      	adds	r3, #4
 8001c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_PCD_EP_Close+0x6e>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e00e      	b.n	8001cd6 <HAL_PCD_EP_Close+0x8c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 fe9e 	bl	8003a08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	460b      	mov	r3, r1
 8001cec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cee:	7afb      	ldrb	r3, [r7, #11]
 8001cf0:	f003 020f 	and.w	r2, r3, #15
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	3304      	adds	r3, #4
 8001d06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2200      	movs	r2, #0
 8001d18:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d20:	7afb      	ldrb	r3, [r7, #11]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d102      	bne.n	8001d3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d109      	bne.n	8001d58 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	6979      	ldr	r1, [r7, #20]
 8001d52:	f002 f97d 	bl	8004050 <USB_EP0StartXfer>
 8001d56:	e008      	b.n	8001d6a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	6979      	ldr	r1, [r7, #20]
 8001d66:	f001 ff2b 	bl	8003bc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	460b      	mov	r3, r1
 8001d82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d84:	7afb      	ldrb	r3, [r7, #11]
 8001d86:	f003 020f 	and.w	r2, r3, #15
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	3338      	adds	r3, #56	; 0x38
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	3304      	adds	r3, #4
 8001d9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2200      	movs	r2, #0
 8001dac:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2201      	movs	r2, #1
 8001db2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001db4:	7afb      	ldrb	r3, [r7, #11]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d102      	bne.n	8001dce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dce:	7afb      	ldrb	r3, [r7, #11]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	6979      	ldr	r1, [r7, #20]
 8001de6:	f002 f933 	bl	8004050 <USB_EP0StartXfer>
 8001dea:	e008      	b.n	8001dfe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	6979      	ldr	r1, [r7, #20]
 8001dfa:	f001 fee1 	bl	8003bc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	f003 020f 	and.w	r2, r3, #15
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d901      	bls.n	8001e26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e050      	b.n	8001ec8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	da0f      	bge.n	8001e4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 020f 	and.w	r2, r3, #15
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	3338      	adds	r3, #56	; 0x38
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	705a      	strb	r2, [r3, #1]
 8001e4c:	e00d      	b.n	8001e6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	3304      	adds	r3, #4
 8001e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_PCD_EP_SetStall+0x82>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e01e      	b.n	8001ec8 <HAL_PCD_EP_SetStall+0xc0>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68f9      	ldr	r1, [r7, #12]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 fb71 	bl	8004580 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10a      	bne.n	8001ebe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	b2d9      	uxtb	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f002 fd61 	bl	8004980 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 020f 	and.w	r2, r3, #15
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d901      	bls.n	8001eee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e042      	b.n	8001f74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	da0f      	bge.n	8001f16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	f003 020f 	and.w	r2, r3, #15
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	3338      	adds	r3, #56	; 0x38
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	705a      	strb	r2, [r3, #1]
 8001f14:	e00f      	b.n	8001f36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 020f 	and.w	r2, r3, #15
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_PCD_EP_ClrStall+0x86>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e00e      	b.n	8001f74 <HAL_PCD_EP_ClrStall+0xa4>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68f9      	ldr	r1, [r7, #12]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f002 fb79 	bl	800465c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da0c      	bge.n	8001faa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	f003 020f 	and.w	r2, r3, #15
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	3338      	adds	r3, #56	; 0x38
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	e00c      	b.n	8001fc4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	f003 020f 	and.w	r2, r3, #15
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68f9      	ldr	r1, [r7, #12]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f002 f998 	bl	8004300 <USB_EPStopXfer>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b08a      	sub	sp, #40	; 0x28
 8001fe2:	af02      	add	r7, sp, #8
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	3338      	adds	r3, #56	; 0x38
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	3304      	adds	r3, #4
 8002004:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a1a      	ldr	r2, [r3, #32]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	429a      	cmp	r2, r3
 8002010:	d901      	bls.n	8002016 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e06c      	b.n	80020f0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	429a      	cmp	r2, r3
 800202a:	d902      	bls.n	8002032 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3303      	adds	r3, #3
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800203a:	e02b      	b.n	8002094 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	429a      	cmp	r2, r3
 8002050:	d902      	bls.n	8002058 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	3303      	adds	r3, #3
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6919      	ldr	r1, [r3, #16]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002070:	b2db      	uxtb	r3, r3
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	4603      	mov	r3, r0
 8002076:	6978      	ldr	r0, [r7, #20]
 8002078:	f002 f9ec 	bl	8004454 <USB_WritePacket>

    ep->xfer_buff  += len;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	441a      	add	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a1a      	ldr	r2, [r3, #32]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	441a      	add	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d809      	bhi.n	80020be <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d203      	bcs.n	80020be <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1be      	bne.n	800203c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d811      	bhi.n	80020ee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	2201      	movs	r2, #1
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	6939      	ldr	r1, [r7, #16]
 80020e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020ea:	4013      	ands	r3, r2
 80020ec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	333c      	adds	r3, #60	; 0x3c
 8002110:	3304      	adds	r3, #4
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4413      	add	r3, r2
 800211e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d17b      	bne.n	8002226 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d015      	beq.n	8002164 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	4a61      	ldr	r2, [pc, #388]	; (80022c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	f240 80b9 	bls.w	80022b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80b3 	beq.w	80022b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215a:	461a      	mov	r2, r3
 800215c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002160:	6093      	str	r3, [r2, #8]
 8002162:	e0a7      	b.n	80022b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217a:	461a      	mov	r2, r3
 800217c:	2320      	movs	r3, #32
 800217e:	6093      	str	r3, [r2, #8]
 8002180:	e098      	b.n	80022b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002188:	2b00      	cmp	r3, #0
 800218a:	f040 8093 	bne.w	80022b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	4a4b      	ldr	r2, [pc, #300]	; (80022c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d90f      	bls.n	80021b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ac:	461a      	mov	r2, r3
 80021ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021b2:	6093      	str	r3, [r2, #8]
 80021b4:	e07e      	b.n	80022b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	3304      	adds	r3, #4
 80021ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	0159      	lsls	r1, r3, #5
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	440b      	add	r3, r1
 80021d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	1ad2      	subs	r2, r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d114      	bne.n	8002218 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002200:	461a      	mov	r2, r3
 8002202:	2101      	movs	r1, #1
 8002204:	f002 fbbc 	bl	8004980 <USB_EP0_OutStart>
 8002208:	e006      	b.n	8002218 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	441a      	add	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	4619      	mov	r1, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f004 fcdc 	bl	8006bdc <HAL_PCD_DataOutStageCallback>
 8002224:	e046      	b.n	80022b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	4a26      	ldr	r2, [pc, #152]	; (80022c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d124      	bne.n	8002278 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	4413      	add	r3, r2
 8002240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002244:	461a      	mov	r2, r3
 8002246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800224a:	6093      	str	r3, [r2, #8]
 800224c:	e032      	b.n	80022b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	4413      	add	r3, r2
 8002260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002264:	461a      	mov	r2, r3
 8002266:	2320      	movs	r3, #32
 8002268:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	4619      	mov	r1, r3
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f004 fcb3 	bl	8006bdc <HAL_PCD_DataOutStageCallback>
 8002276:	e01d      	b.n	80022b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d114      	bne.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d108      	bne.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022a0:	461a      	mov	r2, r3
 80022a2:	2100      	movs	r1, #0
 80022a4:	f002 fb6c 	bl	8004980 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	4619      	mov	r1, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f004 fc94 	bl	8006bdc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	4f54300a 	.word	0x4f54300a
 80022c4:	4f54310a 	.word	0x4f54310a

080022c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	333c      	adds	r3, #60	; 0x3c
 80022e0:	3304      	adds	r3, #4
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a15      	ldr	r2, [pc, #84]	; (8002350 <PCD_EP_OutSetupPacket_int+0x88>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d90e      	bls.n	800231c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002304:	2b00      	cmp	r3, #0
 8002306:	d009      	beq.n	800231c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002314:	461a      	mov	r2, r3
 8002316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800231a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f004 fc4b 	bl	8006bb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <PCD_EP_OutSetupPacket_int+0x88>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d90c      	bls.n	8002344 <PCD_EP_OutSetupPacket_int+0x7c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d108      	bne.n	8002344 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800233c:	461a      	mov	r2, r3
 800233e:	2101      	movs	r1, #1
 8002340:	f002 fb1e 	bl	8004980 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	4f54300a 	.word	0x4f54300a

08002354 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
 8002360:	4613      	mov	r3, r2
 8002362:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d107      	bne.n	8002382 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002372:	883b      	ldrh	r3, [r7, #0]
 8002374:	0419      	lsls	r1, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	430a      	orrs	r2, r1
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
 8002380:	e028      	b.n	80023d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	4413      	add	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e00d      	b.n	80023b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	3340      	adds	r3, #64	; 0x40
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	4413      	add	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	3301      	adds	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d3ec      	bcc.n	8002396 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023bc:	883b      	ldrh	r3, [r7, #0]
 80023be:	0418      	lsls	r0, r3, #16
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	4302      	orrs	r2, r0
 80023cc:	3340      	adds	r3, #64	; 0x40
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	460b      	mov	r3, r1
 80023ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e267      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d075      	beq.n	8002526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243a:	4b88      	ldr	r3, [pc, #544]	; (800265c <HAL_RCC_OscConfig+0x240>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b04      	cmp	r3, #4
 8002444:	d00c      	beq.n	8002460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4b85      	ldr	r3, [pc, #532]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244e:	2b08      	cmp	r3, #8
 8002450:	d112      	bne.n	8002478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b82      	ldr	r3, [pc, #520]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245e:	d10b      	bne.n	8002478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	4b7e      	ldr	r3, [pc, #504]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d05b      	beq.n	8002524 <HAL_RCC_OscConfig+0x108>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d157      	bne.n	8002524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e242      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d106      	bne.n	8002490 <HAL_RCC_OscConfig+0x74>
 8002482:	4b76      	ldr	r3, [pc, #472]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a75      	ldr	r2, [pc, #468]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e01d      	b.n	80024cc <HAL_RCC_OscConfig+0xb0>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x98>
 800249a:	4b70      	ldr	r3, [pc, #448]	; (800265c <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6f      	ldr	r2, [pc, #444]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b6d      	ldr	r3, [pc, #436]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6c      	ldr	r2, [pc, #432]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0xb0>
 80024b4:	4b69      	ldr	r3, [pc, #420]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a68      	ldr	r2, [pc, #416]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a65      	ldr	r2, [pc, #404]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fa76 	bl	80009c4 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7fe fa72 	bl	80009c4 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e207      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0xc0>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe fa62 	bl	80009c4 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002504:	f7fe fa5e 	bl	80009c4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e1f3      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	4b51      	ldr	r3, [pc, #324]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0xe8>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d063      	beq.n	80025fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002532:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253e:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002546:	2b08      	cmp	r3, #8
 8002548:	d11c      	bne.n	8002584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254a:	4b44      	ldr	r3, [pc, #272]	; (800265c <HAL_RCC_OscConfig+0x240>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d116      	bne.n	8002584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x152>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e1c7      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b3b      	ldr	r3, [pc, #236]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4937      	ldr	r1, [pc, #220]	; (800265c <HAL_RCC_OscConfig+0x240>)
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	e03a      	b.n	80025fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258c:	4b34      	ldr	r3, [pc, #208]	; (8002660 <HAL_RCC_OscConfig+0x244>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe fa17 	bl	80009c4 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259a:	f7fe fa13 	bl	80009c4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1a8      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b28      	ldr	r3, [pc, #160]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4925      	ldr	r1, [pc, #148]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
 80025cc:	e015      	b.n	80025fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b24      	ldr	r3, [pc, #144]	; (8002660 <HAL_RCC_OscConfig+0x244>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe f9f6 	bl	80009c4 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025dc:	f7fe f9f2 	bl	80009c4 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e187      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d036      	beq.n	8002674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d016      	beq.n	800263c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_RCC_OscConfig+0x248>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7fe f9d6 	bl	80009c4 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261c:	f7fe f9d2 	bl	80009c4 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e167      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_OscConfig+0x240>)
 8002630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x200>
 800263a:	e01b      	b.n	8002674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_OscConfig+0x248>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7fe f9bf 	bl	80009c4 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	e00e      	b.n	8002668 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800264a:	f7fe f9bb 	bl	80009c4 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d907      	bls.n	8002668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e150      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
 800265c:	40023800 	.word	0x40023800
 8002660:	42470000 	.word	0x42470000
 8002664:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	4b88      	ldr	r3, [pc, #544]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800266a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ea      	bne.n	800264a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8097 	beq.w	80027b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b81      	ldr	r3, [pc, #516]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	4b7d      	ldr	r3, [pc, #500]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	4a7c      	ldr	r2, [pc, #496]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a0:	6413      	str	r3, [r2, #64]	; 0x40
 80026a2:	4b7a      	ldr	r3, [pc, #488]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b77      	ldr	r3, [pc, #476]	; (8002890 <HAL_RCC_OscConfig+0x474>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	4b74      	ldr	r3, [pc, #464]	; (8002890 <HAL_RCC_OscConfig+0x474>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a73      	ldr	r2, [pc, #460]	; (8002890 <HAL_RCC_OscConfig+0x474>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7fe f97b 	bl	80009c4 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7fe f977 	bl	80009c4 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e10c      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_OscConfig+0x474>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x2ea>
 80026f8:	4b64      	ldr	r3, [pc, #400]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	4a63      	ldr	r2, [pc, #396]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6713      	str	r3, [r2, #112]	; 0x70
 8002704:	e01c      	b.n	8002740 <HAL_RCC_OscConfig+0x324>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x30c>
 800270e:	4b5f      	ldr	r3, [pc, #380]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	4a5e      	ldr	r2, [pc, #376]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	6713      	str	r3, [r2, #112]	; 0x70
 800271a:	4b5c      	ldr	r3, [pc, #368]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a5b      	ldr	r2, [pc, #364]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0x324>
 8002728:	4b58      	ldr	r3, [pc, #352]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	4a57      	ldr	r2, [pc, #348]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	6713      	str	r3, [r2, #112]	; 0x70
 8002734:	4b55      	ldr	r3, [pc, #340]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	4a54      	ldr	r2, [pc, #336]	; (800288c <HAL_RCC_OscConfig+0x470>)
 800273a:	f023 0304 	bic.w	r3, r3, #4
 800273e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe f93c 	bl	80009c4 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe f938 	bl	80009c4 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0cb      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	4b49      	ldr	r3, [pc, #292]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ee      	beq.n	8002750 <HAL_RCC_OscConfig+0x334>
 8002772:	e014      	b.n	800279e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002774:	f7fe f926 	bl	80009c4 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe f922 	bl	80009c4 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0b5      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002792:	4b3e      	ldr	r3, [pc, #248]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ee      	bne.n	800277c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a4:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	4a38      	ldr	r2, [pc, #224]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80027aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80a1 	beq.w	80028fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ba:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d05c      	beq.n	8002880 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d141      	bne.n	8002852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b31      	ldr	r3, [pc, #196]	; (8002894 <HAL_RCC_OscConfig+0x478>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe f8f6 	bl	80009c4 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027dc:	f7fe f8f2 	bl	80009c4 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e087      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_RCC_OscConfig+0x470>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	019b      	lsls	r3, r3, #6
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	3b01      	subs	r3, #1
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	491b      	ldr	r1, [pc, #108]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_RCC_OscConfig+0x478>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7fe f8cb 	bl	80009c4 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002832:	f7fe f8c7 	bl	80009c4 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e05c      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x416>
 8002850:	e054      	b.n	80028fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_RCC_OscConfig+0x478>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe f8b4 	bl	80009c4 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe f8b0 	bl	80009c4 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e045      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCC_OscConfig+0x470>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x444>
 800287e:	e03d      	b.n	80028fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e038      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
 800288c:	40023800 	.word	0x40023800
 8002890:	40007000 	.word	0x40007000
 8002894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCC_OscConfig+0x4ec>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d028      	beq.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d121      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d11a      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028c8:	4013      	ands	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d111      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	3b01      	subs	r3, #1
 80028e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d107      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800

0800290c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0cc      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002920:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d90c      	bls.n	8002948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b65      	ldr	r3, [pc, #404]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b8      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002960:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800296a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	494d      	ldr	r1, [pc, #308]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d044      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d119      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e07f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e067      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f023 0203 	bic.w	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4934      	ldr	r1, [pc, #208]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029fc:	f7fd ffe2 	bl	80009c4 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7fd ffde 	bl	80009c4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e04f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 020c 	and.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1eb      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d20c      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e032      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4916      	ldr	r1, [pc, #88]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	490e      	ldr	r1, [pc, #56]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a92:	f000 f821 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490a      	ldr	r1, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fe58 	bl	8000768 <HAL_InitTick>

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023c00 	.word	0x40023c00
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	080071d0 	.word	0x080071d0
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002adc:	b090      	sub	sp, #64	; 0x40
 8002ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae8:	2300      	movs	r3, #0
 8002aea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af0:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d00d      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x40>
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	f200 80a1 	bhi.w	8002c44 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x34>
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b0a:	e09b      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b0e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b10:	e09b      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b12:	4b53      	ldr	r3, [pc, #332]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b16:	e098      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b18:	4b4f      	ldr	r3, [pc, #316]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b20:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b22:	4b4d      	ldr	r3, [pc, #308]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d028      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2e:	4b4a      	ldr	r3, [pc, #296]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	2200      	movs	r2, #0
 8002b36:	623b      	str	r3, [r7, #32]
 8002b38:	627a      	str	r2, [r7, #36]	; 0x24
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b40:	2100      	movs	r1, #0
 8002b42:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b44:	fb03 f201 	mul.w	r2, r3, r1
 8002b48:	2300      	movs	r3, #0
 8002b4a:	fb00 f303 	mul.w	r3, r0, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	4a43      	ldr	r2, [pc, #268]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b52:	fba0 1202 	umull	r1, r2, r0, r2
 8002b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b58:	460a      	mov	r2, r1
 8002b5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b5e:	4413      	add	r3, r2
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b64:	2200      	movs	r2, #0
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	61fa      	str	r2, [r7, #28]
 8002b6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b72:	f7fd fb31 	bl	80001d8 <__aeabi_uldivmod>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b7e:	e053      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b80:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	099b      	lsrs	r3, r3, #6
 8002b86:	2200      	movs	r2, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	617a      	str	r2, [r7, #20]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b92:	f04f 0b00 	mov.w	fp, #0
 8002b96:	4652      	mov	r2, sl
 8002b98:	465b      	mov	r3, fp
 8002b9a:	f04f 0000 	mov.w	r0, #0
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	0159      	lsls	r1, r3, #5
 8002ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba8:	0150      	lsls	r0, r2, #5
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	ebb2 080a 	subs.w	r8, r2, sl
 8002bb2:	eb63 090b 	sbc.w	r9, r3, fp
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bca:	ebb2 0408 	subs.w	r4, r2, r8
 8002bce:	eb63 0509 	sbc.w	r5, r3, r9
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	00eb      	lsls	r3, r5, #3
 8002bdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be0:	00e2      	lsls	r2, r4, #3
 8002be2:	4614      	mov	r4, r2
 8002be4:	461d      	mov	r5, r3
 8002be6:	eb14 030a 	adds.w	r3, r4, sl
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	eb45 030b 	adc.w	r3, r5, fp
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bfe:	4629      	mov	r1, r5
 8002c00:	028b      	lsls	r3, r1, #10
 8002c02:	4621      	mov	r1, r4
 8002c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c08:	4621      	mov	r1, r4
 8002c0a:	028a      	lsls	r2, r1, #10
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c12:	2200      	movs	r2, #0
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	60fa      	str	r2, [r7, #12]
 8002c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c1c:	f7fd fadc 	bl	80001d8 <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4613      	mov	r3, r2
 8002c26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	3301      	adds	r3, #1
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c42:	e002      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3740      	adds	r7, #64	; 0x40
 8002c50:	46bd      	mov	sp, r7
 8002c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	00f42400 	.word	0x00f42400
 8002c60:	017d7840 	.word	0x017d7840

08002c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000000 	.word	0x20000000

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c80:	f7ff fff0 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	0a9b      	lsrs	r3, r3, #10
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4903      	ldr	r1, [pc, #12]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c92:	5ccb      	ldrb	r3, [r1, r3]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	080071e0 	.word	0x080071e0

08002ca4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_GetClockConfig+0x5c>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0203 	and.w	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_RCC_GetClockConfig+0x5c>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <HAL_RCC_GetClockConfig+0x5c>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_GetClockConfig+0x5c>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	08db      	lsrs	r3, r3, #3
 8002cde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <HAL_RCC_GetClockConfig+0x60>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0207 	and.w	r2, r3, #7
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	601a      	str	r2, [r3, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40023c00 	.word	0x40023c00

08002d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e041      	b.n	8002d9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f839 	bl	8002da6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f000 f9ca 	bl	80030e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d001      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e044      	b.n	8002e5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1e      	ldr	r2, [pc, #120]	; (8002e6c <HAL_TIM_Base_Start_IT+0xb0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d018      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x6c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfe:	d013      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x6c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x6c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a19      	ldr	r2, [pc, #100]	; (8002e74 <HAL_TIM_Base_Start_IT+0xb8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x6c>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x6c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <HAL_TIM_Base_Start_IT+0xc0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d111      	bne.n	8002e4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d010      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4a:	e007      	b.n	8002e5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40000800 	.word	0x40000800
 8002e78:	40000c00 	.word	0x40000c00
 8002e7c:	40014000 	.word	0x40014000

08002e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d122      	bne.n	8002edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d11b      	bne.n	8002edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0202 	mvn.w	r2, #2
 8002eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8ee 	bl	80030a4 <HAL_TIM_IC_CaptureCallback>
 8002ec8:	e005      	b.n	8002ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f8e0 	bl	8003090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f8f1 	bl	80030b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d122      	bne.n	8002f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d11b      	bne.n	8002f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0204 	mvn.w	r2, #4
 8002f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2202      	movs	r2, #2
 8002f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f8c4 	bl	80030a4 <HAL_TIM_IC_CaptureCallback>
 8002f1c:	e005      	b.n	8002f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f8b6 	bl	8003090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f8c7 	bl	80030b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d122      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d11b      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0208 	mvn.w	r2, #8
 8002f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f89a 	bl	80030a4 <HAL_TIM_IC_CaptureCallback>
 8002f70:	e005      	b.n	8002f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f88c 	bl	8003090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f89d 	bl	80030b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d122      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0210 	mvn.w	r2, #16
 8002fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2208      	movs	r2, #8
 8002fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f870 	bl	80030a4 <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f862 	bl	8003090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f873 	bl	80030b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0201 	mvn.w	r2, #1
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd fb76 	bl	80006f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b80      	cmp	r3, #128	; 0x80
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301c:	2b80      	cmp	r3, #128	; 0x80
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8e2 	bl	80031f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f838 	bl	80030cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b20      	cmp	r3, #32
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b20      	cmp	r3, #32
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0220 	mvn.w	r2, #32
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8ac 	bl	80031e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a34      	ldr	r2, [pc, #208]	; (80031c4 <TIM_Base_SetConfig+0xe4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00f      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fe:	d00b      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <TIM_Base_SetConfig+0xe8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a30      	ldr	r2, [pc, #192]	; (80031cc <TIM_Base_SetConfig+0xec>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <TIM_Base_SetConfig+0xf0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d108      	bne.n	800312a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a25      	ldr	r2, [pc, #148]	; (80031c4 <TIM_Base_SetConfig+0xe4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01b      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d017      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <TIM_Base_SetConfig+0xe8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a21      	ldr	r2, [pc, #132]	; (80031cc <TIM_Base_SetConfig+0xec>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00f      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <TIM_Base_SetConfig+0xf0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00b      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1f      	ldr	r2, [pc, #124]	; (80031d4 <TIM_Base_SetConfig+0xf4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <TIM_Base_SetConfig+0xf8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <TIM_Base_SetConfig+0xfc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d108      	bne.n	800317c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a08      	ldr	r2, [pc, #32]	; (80031c4 <TIM_Base_SetConfig+0xe4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d103      	bne.n	80031b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	615a      	str	r2, [r3, #20]
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40000400 	.word	0x40000400
 80031cc:	40000800 	.word	0x40000800
 80031d0:	40000c00 	.word	0x40000c00
 80031d4:	40014000 	.word	0x40014000
 80031d8:	40014400 	.word	0x40014400
 80031dc:	40014800 	.word	0x40014800

080031e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003208:	b084      	sub	sp, #16
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	f107 001c 	add.w	r0, r7, #28
 8003216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	2b01      	cmp	r3, #1
 800321e:	d122      	bne.n	8003266 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800324a:	2b01      	cmp	r3, #1
 800324c:	d105      	bne.n	800325a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f001 fbee 	bl	8004a3c <USB_CoreReset>
 8003260:	4603      	mov	r3, r0
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	e01a      	b.n	800329c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f001 fbe2 	bl	8004a3c <USB_CoreReset>
 8003278:	4603      	mov	r3, r0
 800327a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800327c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	639a      	str	r2, [r3, #56]	; 0x38
 800328e:	e005      	b.n	800329c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d10b      	bne.n	80032ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f043 0206 	orr.w	r2, r3, #6
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f043 0220 	orr.w	r2, r3, #32
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032c6:	b004      	add	sp, #16
 80032c8:	4770      	bx	lr
	...

080032cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	4613      	mov	r3, r2
 80032d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d165      	bne.n	80033ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4a41      	ldr	r2, [pc, #260]	; (80033e8 <USB_SetTurnaroundTime+0x11c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d906      	bls.n	80032f6 <USB_SetTurnaroundTime+0x2a>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4a40      	ldr	r2, [pc, #256]	; (80033ec <USB_SetTurnaroundTime+0x120>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d202      	bcs.n	80032f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80032f0:	230f      	movs	r3, #15
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	e062      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4a3c      	ldr	r2, [pc, #240]	; (80033ec <USB_SetTurnaroundTime+0x120>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d306      	bcc.n	800330c <USB_SetTurnaroundTime+0x40>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4a3b      	ldr	r2, [pc, #236]	; (80033f0 <USB_SetTurnaroundTime+0x124>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d202      	bcs.n	800330c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003306:	230e      	movs	r3, #14
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e057      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4a38      	ldr	r2, [pc, #224]	; (80033f0 <USB_SetTurnaroundTime+0x124>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d306      	bcc.n	8003322 <USB_SetTurnaroundTime+0x56>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4a37      	ldr	r2, [pc, #220]	; (80033f4 <USB_SetTurnaroundTime+0x128>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d202      	bcs.n	8003322 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800331c:	230d      	movs	r3, #13
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	e04c      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4a33      	ldr	r2, [pc, #204]	; (80033f4 <USB_SetTurnaroundTime+0x128>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d306      	bcc.n	8003338 <USB_SetTurnaroundTime+0x6c>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4a32      	ldr	r2, [pc, #200]	; (80033f8 <USB_SetTurnaroundTime+0x12c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d802      	bhi.n	8003338 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003332:	230c      	movs	r3, #12
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	e041      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4a2f      	ldr	r2, [pc, #188]	; (80033f8 <USB_SetTurnaroundTime+0x12c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d906      	bls.n	800334e <USB_SetTurnaroundTime+0x82>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4a2e      	ldr	r2, [pc, #184]	; (80033fc <USB_SetTurnaroundTime+0x130>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d802      	bhi.n	800334e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003348:	230b      	movs	r3, #11
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	e036      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4a2a      	ldr	r2, [pc, #168]	; (80033fc <USB_SetTurnaroundTime+0x130>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d906      	bls.n	8003364 <USB_SetTurnaroundTime+0x98>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4a29      	ldr	r2, [pc, #164]	; (8003400 <USB_SetTurnaroundTime+0x134>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d802      	bhi.n	8003364 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800335e:	230a      	movs	r3, #10
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e02b      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4a26      	ldr	r2, [pc, #152]	; (8003400 <USB_SetTurnaroundTime+0x134>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d906      	bls.n	800337a <USB_SetTurnaroundTime+0xae>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4a25      	ldr	r2, [pc, #148]	; (8003404 <USB_SetTurnaroundTime+0x138>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d202      	bcs.n	800337a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003374:	2309      	movs	r3, #9
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	e020      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4a21      	ldr	r2, [pc, #132]	; (8003404 <USB_SetTurnaroundTime+0x138>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d306      	bcc.n	8003390 <USB_SetTurnaroundTime+0xc4>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4a20      	ldr	r2, [pc, #128]	; (8003408 <USB_SetTurnaroundTime+0x13c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d802      	bhi.n	8003390 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800338a:	2308      	movs	r3, #8
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	e015      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <USB_SetTurnaroundTime+0x13c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d906      	bls.n	80033a6 <USB_SetTurnaroundTime+0xda>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4a1c      	ldr	r2, [pc, #112]	; (800340c <USB_SetTurnaroundTime+0x140>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d202      	bcs.n	80033a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80033a0:	2307      	movs	r3, #7
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e00a      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80033a6:	2306      	movs	r3, #6
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	e007      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80033b2:	2309      	movs	r3, #9
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	e001      	b.n	80033bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80033b8:	2309      	movs	r3, #9
 80033ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	029b      	lsls	r3, r3, #10
 80033d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80033d4:	431a      	orrs	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	00d8acbf 	.word	0x00d8acbf
 80033ec:	00e4e1c0 	.word	0x00e4e1c0
 80033f0:	00f42400 	.word	0x00f42400
 80033f4:	01067380 	.word	0x01067380
 80033f8:	011a499f 	.word	0x011a499f
 80033fc:	01312cff 	.word	0x01312cff
 8003400:	014ca43f 	.word	0x014ca43f
 8003404:	016e3600 	.word	0x016e3600
 8003408:	01a6ab1f 	.word	0x01a6ab1f
 800340c:	01e84800 	.word	0x01e84800

08003410 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f043 0201 	orr.w	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f023 0201 	bic.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d115      	bne.n	80034a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003482:	2001      	movs	r0, #1
 8003484:	f7fd faaa 	bl	80009dc <HAL_Delay>
      ms++;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3301      	adds	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f001 fa45 	bl	800491e <USB_GetMode>
 8003494:	4603      	mov	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d01e      	beq.n	80034d8 <USB_SetCurrentMode+0x84>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b31      	cmp	r3, #49	; 0x31
 800349e:	d9f0      	bls.n	8003482 <USB_SetCurrentMode+0x2e>
 80034a0:	e01a      	b.n	80034d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d115      	bne.n	80034d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80034b4:	2001      	movs	r0, #1
 80034b6:	f7fd fa91 	bl	80009dc <HAL_Delay>
      ms++;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	3301      	adds	r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f001 fa2c 	bl	800491e <USB_GetMode>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <USB_SetCurrentMode+0x84>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b31      	cmp	r3, #49	; 0x31
 80034d0:	d9f0      	bls.n	80034b4 <USB_SetCurrentMode+0x60>
 80034d2:	e001      	b.n	80034d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e005      	b.n	80034e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b32      	cmp	r3, #50	; 0x32
 80034dc:	d101      	bne.n	80034e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034ec:	b084      	sub	sp, #16
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80034fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	e009      	b.n	8003520 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	3340      	adds	r3, #64	; 0x40
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	2200      	movs	r2, #0
 8003518:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	3301      	adds	r3, #1
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b0e      	cmp	r3, #14
 8003524:	d9f2      	bls.n	800350c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d11c      	bne.n	8003566 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800353a:	f043 0302 	orr.w	r3, r3, #2
 800353e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	639a      	str	r2, [r3, #56]	; 0x38
 8003564:	e00b      	b.n	800357e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003584:	461a      	mov	r2, r3
 8003586:	2300      	movs	r3, #0
 8003588:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003590:	4619      	mov	r1, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003598:	461a      	mov	r2, r3
 800359a:	680b      	ldr	r3, [r1, #0]
 800359c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10c      	bne.n	80035be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80035aa:	2100      	movs	r1, #0
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f965 	bl	800387c <USB_SetDevSpeed>
 80035b2:	e008      	b.n	80035c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80035b4:	2101      	movs	r1, #1
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f960 	bl	800387c <USB_SetDevSpeed>
 80035bc:	e003      	b.n	80035c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80035be:	2103      	movs	r1, #3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f95b 	bl	800387c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80035c6:	2110      	movs	r1, #16
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f8f3 	bl	80037b4 <USB_FlushTxFifo>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f91f 	bl	800381c <USB_FlushRxFifo>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ee:	461a      	mov	r2, r3
 80035f0:	2300      	movs	r3, #0
 80035f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fa:	461a      	mov	r2, r3
 80035fc:	2300      	movs	r3, #0
 80035fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003606:	461a      	mov	r2, r3
 8003608:	2300      	movs	r3, #0
 800360a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800360c:	2300      	movs	r3, #0
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	e043      	b.n	800369a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4413      	add	r3, r2
 800361a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003628:	d118      	bne.n	800365c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363c:	461a      	mov	r2, r3
 800363e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	e013      	b.n	800366e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003652:	461a      	mov	r2, r3
 8003654:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e008      	b.n	800366e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003668:	461a      	mov	r2, r3
 800366a:	2300      	movs	r3, #0
 800366c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800367a:	461a      	mov	r2, r3
 800367c:	2300      	movs	r3, #0
 800367e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368c:	461a      	mov	r2, r3
 800368e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003692:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	3301      	adds	r3, #1
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d3b7      	bcc.n	8003612 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	e043      	b.n	8003730 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036be:	d118      	bne.n	80036f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10a      	bne.n	80036dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d2:	461a      	mov	r2, r3
 80036d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e013      	b.n	8003704 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e8:	461a      	mov	r2, r3
 80036ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	e008      	b.n	8003704 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fe:	461a      	mov	r2, r3
 8003700:	2300      	movs	r3, #0
 8003702:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003710:	461a      	mov	r2, r3
 8003712:	2300      	movs	r3, #0
 8003714:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003722:	461a      	mov	r2, r3
 8003724:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003728:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	3301      	adds	r3, #1
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	429a      	cmp	r2, r3
 8003736:	d3b7      	bcc.n	80036a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003746:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800374a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003758:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f043 0210 	orr.w	r2, r3, #16
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699a      	ldr	r2, [r3, #24]
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <USB_DevInit+0x2c4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f043 0208 	orr.w	r2, r3, #8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800378a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003798:	f043 0304 	orr.w	r3, r3, #4
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037ac:	b004      	add	sp, #16
 80037ae:	4770      	bx	lr
 80037b0:	803c3800 	.word	0x803c3800

080037b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3301      	adds	r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a13      	ldr	r2, [pc, #76]	; (8003818 <USB_FlushTxFifo+0x64>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d901      	bls.n	80037d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e01b      	b.n	800380c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	daf2      	bge.n	80037c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	019b      	lsls	r3, r3, #6
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3301      	adds	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a08      	ldr	r2, [pc, #32]	; (8003818 <USB_FlushTxFifo+0x64>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e006      	b.n	800380c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b20      	cmp	r3, #32
 8003808:	d0f0      	beq.n	80037ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	00030d40 	.word	0x00030d40

0800381c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3301      	adds	r3, #1
 800382c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a11      	ldr	r2, [pc, #68]	; (8003878 <USB_FlushRxFifo+0x5c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e018      	b.n	800386c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	daf2      	bge.n	8003828 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2210      	movs	r2, #16
 800384a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3301      	adds	r3, #1
 8003850:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4a08      	ldr	r2, [pc, #32]	; (8003878 <USB_FlushRxFifo+0x5c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e006      	b.n	800386c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b10      	cmp	r3, #16
 8003868:	d0f0      	beq.n	800384c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	00030d40 	.word	0x00030d40

0800387c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800389c:	4313      	orrs	r3, r2
 800389e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b087      	sub	sp, #28
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0306 	and.w	r3, r3, #6
 80038c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d102      	bne.n	80038d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80038ce:	2300      	movs	r3, #0
 80038d0:	75fb      	strb	r3, [r7, #23]
 80038d2:	e00a      	b.n	80038ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d002      	beq.n	80038e0 <USB_GetDevSpeed+0x32>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b06      	cmp	r3, #6
 80038de:	d102      	bne.n	80038e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80038e0:	2302      	movs	r3, #2
 80038e2:	75fb      	strb	r3, [r7, #23]
 80038e4:	e001      	b.n	80038ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80038e6:	230f      	movs	r3, #15
 80038e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	785b      	ldrb	r3, [r3, #1]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d13a      	bne.n	800398a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	2101      	movs	r1, #1
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	b29b      	uxth	r3, r3
 800392c:	68f9      	ldr	r1, [r7, #12]
 800392e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003932:	4313      	orrs	r3, r2
 8003934:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d155      	bne.n	80039f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	791b      	ldrb	r3, [r3, #4]
 8003966:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003968:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	059b      	lsls	r3, r3, #22
 800396e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003970:	4313      	orrs	r3, r2
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	0151      	lsls	r1, r2, #5
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	440a      	add	r2, r1
 800397a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800397e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e036      	b.n	80039f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	2101      	movs	r1, #1
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	041b      	lsls	r3, r3, #16
 80039a2:	68f9      	ldr	r1, [r7, #12]
 80039a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d11a      	bne.n	80039f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	791b      	ldrb	r3, [r3, #4]
 80039dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039de:	430b      	orrs	r3, r1
 80039e0:	4313      	orrs	r3, r2
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	0151      	lsls	r1, r2, #5
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	440a      	add	r2, r1
 80039ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d161      	bne.n	8003ae8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a3a:	d11f      	bne.n	8003a7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	0151      	lsls	r1, r2, #5
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	440a      	add	r2, r1
 8003a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	68f9      	ldr	r1, [r7, #12]
 8003a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	0159      	lsls	r1, r3, #5
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	440b      	add	r3, r1
 8003ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4b35      	ldr	r3, [pc, #212]	; (8003bb8 <USB_DeactivateEndpoint+0x1b0>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]
 8003ae6:	e060      	b.n	8003baa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003afe:	d11f      	bne.n	8003b40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	0151      	lsls	r1, r2, #5
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	440a      	add	r2, r1
 8003b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	0151      	lsls	r1, r2, #5
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	440a      	add	r2, r1
 8003b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	2101      	movs	r1, #1
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	041b      	lsls	r3, r3, #16
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	68f9      	ldr	r1, [r7, #12]
 8003b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b60:	4013      	ands	r3, r2
 8003b62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	2101      	movs	r1, #1
 8003b76:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b84:	4013      	ands	r3, r2
 8003b86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	0159      	lsls	r1, r3, #5
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	440b      	add	r3, r1
 8003b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <USB_DeactivateEndpoint+0x1b4>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	ec337800 	.word	0xec337800
 8003bbc:	eff37800 	.word	0xeff37800

08003bc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	785b      	ldrb	r3, [r3, #1]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	f040 815c 	bne.w	8003e9a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d132      	bne.n	8003c50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	0151      	lsls	r1, r2, #5
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	440a      	add	r2, r1
 8003c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	0151      	lsls	r1, r2, #5
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	440a      	add	r2, r1
 8003c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	0151      	lsls	r1, r2, #5
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	440a      	add	r2, r1
 8003c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c48:	0cdb      	lsrs	r3, r3, #19
 8003c4a:	04db      	lsls	r3, r3, #19
 8003c4c:	6113      	str	r3, [r2, #16]
 8003c4e:	e074      	b.n	8003d3a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	0151      	lsls	r1, r2, #5
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	440a      	add	r2, r1
 8003c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c6a:	0cdb      	lsrs	r3, r3, #19
 8003c6c:	04db      	lsls	r3, r3, #19
 8003c6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6999      	ldr	r1, [r3, #24]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	440b      	add	r3, r1
 8003cac:	1e59      	subs	r1, r3, #1
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003cb8:	4b9d      	ldr	r3, [pc, #628]	; (8003f30 <USB_EPStartXfer+0x370>)
 8003cba:	400b      	ands	r3, r1
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	0148      	lsls	r0, r1, #5
 8003cc0:	69f9      	ldr	r1, [r7, #28]
 8003cc2:	4401      	add	r1, r0
 8003cc4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce2:	69b9      	ldr	r1, [r7, #24]
 8003ce4:	0148      	lsls	r0, r1, #5
 8003ce6:	69f9      	ldr	r1, [r7, #28]
 8003ce8:	4401      	add	r1, r0
 8003cea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	791b      	ldrb	r3, [r3, #4]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d11f      	bne.n	8003d3a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	0151      	lsls	r1, r2, #5
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	440a      	add	r2, r1
 8003d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d14:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003d18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	0151      	lsls	r1, r2, #5
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	440a      	add	r2, r1
 8003d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d38:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d14b      	bne.n	8003dd8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d009      	beq.n	8003d5c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d54:	461a      	mov	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	791b      	ldrb	r3, [r3, #4]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d128      	bne.n	8003db6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d110      	bne.n	8003d96 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	0151      	lsls	r1, r2, #5
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	440a      	add	r2, r1
 8003d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	e00f      	b.n	8003db6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	0151      	lsls	r1, r2, #5
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	440a      	add	r2, r1
 8003dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	0151      	lsls	r1, r2, #5
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	440a      	add	r2, r1
 8003dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e133      	b.n	8004040 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003df6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	791b      	ldrb	r3, [r3, #4]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d015      	beq.n	8003e2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 811b 	beq.w	8004040 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	69f9      	ldr	r1, [r7, #28]
 8003e22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e26:	4313      	orrs	r3, r2
 8003e28:	634b      	str	r3, [r1, #52]	; 0x34
 8003e2a:	e109      	b.n	8004040 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d110      	bne.n	8003e5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	0151      	lsls	r1, r2, #5
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	440a      	add	r2, r1
 8003e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	e00f      	b.n	8003e7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	0151      	lsls	r1, r2, #5
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	440a      	add	r2, r1
 8003e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	6919      	ldr	r1, [r3, #16]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	781a      	ldrb	r2, [r3, #0]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	b298      	uxth	r0, r3
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	4603      	mov	r3, r0
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fade 	bl	8004454 <USB_WritePacket>
 8003e98:	e0d2      	b.n	8004040 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	0151      	lsls	r1, r2, #5
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	440a      	add	r2, r1
 8003eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eb4:	0cdb      	lsrs	r3, r3, #19
 8003eb6:	04db      	lsls	r3, r3, #19
 8003eb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	0151      	lsls	r1, r2, #5
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	440a      	add	r2, r1
 8003ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ed4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ed8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003edc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d126      	bne.n	8003f34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efc:	69b9      	ldr	r1, [r7, #24]
 8003efe:	0148      	lsls	r0, r1, #5
 8003f00:	69f9      	ldr	r1, [r7, #28]
 8003f02:	4401      	add	r1, r0
 8003f04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	0151      	lsls	r1, r2, #5
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	440a      	add	r2, r1
 8003f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f2a:	6113      	str	r3, [r2, #16]
 8003f2c:	e03a      	b.n	8003fa4 <USB_EPStartXfer+0x3e4>
 8003f2e:	bf00      	nop
 8003f30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	1e5a      	subs	r2, r3, #1
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	8afa      	ldrh	r2, [r7, #22]
 8003f50:	fb03 f202 	mul.w	r2, r3, r2
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	8afb      	ldrh	r3, [r7, #22]
 8003f68:	04d9      	lsls	r1, r3, #19
 8003f6a:	4b38      	ldr	r3, [pc, #224]	; (800404c <USB_EPStartXfer+0x48c>)
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	69b9      	ldr	r1, [r7, #24]
 8003f70:	0148      	lsls	r0, r1, #5
 8003f72:	69f9      	ldr	r1, [r7, #28]
 8003f74:	4401      	add	r1, r0
 8003f76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f94:	69b9      	ldr	r1, [r7, #24]
 8003f96:	0148      	lsls	r0, r1, #5
 8003f98:	69f9      	ldr	r1, [r7, #28]
 8003f9a:	4401      	add	r1, r0
 8003f9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d10d      	bne.n	8003fc6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	6919      	ldr	r1, [r3, #16]
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc2:	460a      	mov	r2, r1
 8003fc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	791b      	ldrb	r3, [r3, #4]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d128      	bne.n	8004020 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d110      	bne.n	8004000 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e00f      	b.n	8004020 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	440a      	add	r2, r1
 8004016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800403e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	1ff80000 	.word	0x1ff80000

08004050 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	4613      	mov	r3, r2
 800405c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	2b01      	cmp	r3, #1
 800406e:	f040 80ce 	bne.w	800420e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d132      	bne.n	80040e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	0151      	lsls	r1, r2, #5
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	440a      	add	r2, r1
 8004090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004094:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004098:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800409c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	0151      	lsls	r1, r2, #5
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	440a      	add	r2, r1
 80040d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d8:	0cdb      	lsrs	r3, r3, #19
 80040da:	04db      	lsls	r3, r3, #19
 80040dc:	6113      	str	r3, [r2, #16]
 80040de:	e04e      	b.n	800417e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040fa:	0cdb      	lsrs	r3, r3, #19
 80040fc:	04db      	lsls	r3, r3, #19
 80040fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	0151      	lsls	r1, r2, #5
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	440a      	add	r2, r1
 8004116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800411e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004122:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	429a      	cmp	r2, r3
 800412e:	d903      	bls.n	8004138 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	0151      	lsls	r1, r2, #5
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	440a      	add	r2, r1
 800414e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004152:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004156:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800416e:	6939      	ldr	r1, [r7, #16]
 8004170:	0148      	lsls	r0, r1, #5
 8004172:	6979      	ldr	r1, [r7, #20]
 8004174:	4401      	add	r1, r0
 8004176:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800417a:	4313      	orrs	r3, r2
 800417c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d11e      	bne.n	80041c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004198:	461a      	mov	r2, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	0151      	lsls	r1, r2, #5
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	440a      	add	r2, r1
 80041b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	e097      	b.n	80042f2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	0151      	lsls	r1, r2, #5
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	440a      	add	r2, r1
 80041d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8083 	beq.w	80042f2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	2101      	movs	r1, #1
 80041fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004202:	6979      	ldr	r1, [r7, #20]
 8004204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004208:	4313      	orrs	r3, r2
 800420a:	634b      	str	r3, [r1, #52]	; 0x34
 800420c:	e071      	b.n	80042f2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	0151      	lsls	r1, r2, #5
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	440a      	add	r2, r1
 8004224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004228:	0cdb      	lsrs	r3, r3, #19
 800422a:	04db      	lsls	r3, r3, #19
 800422c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	0151      	lsls	r1, r2, #5
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	440a      	add	r2, r1
 8004244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004248:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800424c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004250:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	0151      	lsls	r1, r2, #5
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	440a      	add	r2, r1
 8004280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004288:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a0:	6939      	ldr	r1, [r7, #16]
 80042a2:	0148      	lsls	r0, r1, #5
 80042a4:	6979      	ldr	r1, [r7, #20]
 80042a6:	4401      	add	r1, r0
 80042a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042ac:	4313      	orrs	r3, r2
 80042ae:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d10d      	bne.n	80042d2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6919      	ldr	r1, [r3, #16]
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ce:	460a      	mov	r2, r1
 80042d0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	0151      	lsls	r1, r2, #5
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	440a      	add	r2, r1
 80042e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	371c      	adds	r7, #28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	785b      	ldrb	r3, [r3, #1]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d14a      	bne.n	80043b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004336:	f040 8086 	bne.w	8004446 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	7812      	ldrb	r2, [r2, #0]
 800434e:	0151      	lsls	r1, r2, #5
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	440a      	add	r2, r1
 8004354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004358:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800435c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	7812      	ldrb	r2, [r2, #0]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	440a      	add	r2, r1
 8004378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800437c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004380:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3301      	adds	r3, #1
 8004386:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f242 7210 	movw	r2, #10000	; 0x2710
 800438e:	4293      	cmp	r3, r2
 8004390:	d902      	bls.n	8004398 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
          break;
 8004396:	e056      	b.n	8004446 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043b0:	d0e7      	beq.n	8004382 <USB_EPStopXfer+0x82>
 80043b2:	e048      	b.n	8004446 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043cc:	d13b      	bne.n	8004446 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	7812      	ldrb	r2, [r2, #0]
 80043e2:	0151      	lsls	r1, r2, #5
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	440a      	add	r2, r1
 80043e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	7812      	ldrb	r2, [r2, #0]
 8004406:	0151      	lsls	r1, r2, #5
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	440a      	add	r2, r1
 800440c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004414:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3301      	adds	r3, #1
 800441a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004422:	4293      	cmp	r3, r2
 8004424:	d902      	bls.n	800442c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	75fb      	strb	r3, [r7, #23]
          break;
 800442a:	e00c      	b.n	8004446 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004444:	d0e7      	beq.n	8004416 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004446:	7dfb      	ldrb	r3, [r7, #23]
}
 8004448:	4618      	mov	r0, r3
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004454:	b480      	push	{r7}
 8004456:	b089      	sub	sp, #36	; 0x24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	4611      	mov	r1, r2
 8004460:	461a      	mov	r2, r3
 8004462:	460b      	mov	r3, r1
 8004464:	71fb      	strb	r3, [r7, #7]
 8004466:	4613      	mov	r3, r2
 8004468:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004472:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004476:	2b00      	cmp	r3, #0
 8004478:	d123      	bne.n	80044c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800447a:	88bb      	ldrh	r3, [r7, #4]
 800447c:	3303      	adds	r3, #3
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	e018      	b.n	80044ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	031a      	lsls	r2, r3, #12
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	4413      	add	r3, r2
 8004490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004494:	461a      	mov	r2, r3
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	3301      	adds	r3, #1
 80044a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	3301      	adds	r3, #1
 80044a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3301      	adds	r3, #1
 80044b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	3301      	adds	r3, #1
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d3e2      	bcc.n	8004488 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3724      	adds	r7, #36	; 0x24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b08b      	sub	sp, #44	; 0x2c
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	623b      	str	r3, [r7, #32]
 80044fa:	e014      	b.n	8004526 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	601a      	str	r2, [r3, #0]
    pDest++;
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	3301      	adds	r3, #1
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	3301      	adds	r3, #1
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	3301      	adds	r3, #1
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	3301      	adds	r3, #1
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	3301      	adds	r3, #1
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	6a3a      	ldr	r2, [r7, #32]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	429a      	cmp	r2, r3
 800452c:	d3e6      	bcc.n	80044fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800452e:	8bfb      	ldrh	r3, [r7, #30]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01e      	beq.n	8004572 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800453e:	461a      	mov	r2, r3
 8004540:	f107 0310 	add.w	r3, r7, #16
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
 8004554:	b2da      	uxtb	r2, r3
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	701a      	strb	r2, [r3, #0]
      i++;
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	3301      	adds	r3, #1
 800455e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	3301      	adds	r3, #1
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004566:	8bfb      	ldrh	r3, [r7, #30]
 8004568:	3b01      	subs	r3, #1
 800456a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800456c:	8bfb      	ldrh	r3, [r7, #30]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1ea      	bne.n	8004548 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004574:	4618      	mov	r0, r3
 8004576:	372c      	adds	r7, #44	; 0x2c
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	785b      	ldrb	r3, [r3, #1]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d12c      	bne.n	80045f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	db12      	blt.n	80045d4 <USB_EPSetStall+0x54>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00f      	beq.n	80045d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	0151      	lsls	r1, r2, #5
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	440a      	add	r2, r1
 80045ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	e02b      	b.n	800464e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	db12      	blt.n	800462e <USB_EPSetStall+0xae>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00f      	beq.n	800462e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004628:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800462c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	0151      	lsls	r1, r2, #5
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	440a      	add	r2, r1
 8004644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800464c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d128      	bne.n	80046ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	0151      	lsls	r1, r2, #5
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	440a      	add	r2, r1
 800468e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004692:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004696:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	791b      	ldrb	r3, [r3, #4]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d003      	beq.n	80046a8 <USB_EPClearStall+0x4c>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	791b      	ldrb	r3, [r3, #4]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d138      	bne.n	800471a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e027      	b.n	800471a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	791b      	ldrb	r3, [r3, #4]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d003      	beq.n	80046fa <USB_EPClearStall+0x9e>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	791b      	ldrb	r3, [r3, #4]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d10f      	bne.n	800471a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	0151      	lsls	r1, r2, #5
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	440a      	add	r2, r1
 8004710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004718:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004746:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800474a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800475c:	68f9      	ldr	r1, [r7, #12]
 800475e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800478e:	f023 0303 	bic.w	r3, r3, #3
 8004792:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047a2:	f023 0302 	bic.w	r3, r3, #2
 80047a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b085      	sub	sp, #20
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047d0:	f023 0303 	bic.w	r3, r3, #3
 80047d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047e4:	f043 0302 	orr.w	r3, r3, #2
 80047e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4013      	ands	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004810:	68fb      	ldr	r3, [r7, #12]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	4013      	ands	r3, r2
 8004840:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	0c1b      	lsrs	r3, r3, #16
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004852:	b480      	push	{r7}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	4013      	ands	r3, r2
 8004874:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	b29b      	uxth	r3, r3
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	460b      	mov	r3, r1
 8004890:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4013      	ands	r3, r2
 80048b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048b4:	68bb      	ldr	r3, [r7, #8]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b087      	sub	sp, #28
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	460b      	mov	r3, r1
 80048cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	fa22 f303 	lsr.w	r3, r2, r3
 80048f2:	01db      	lsls	r3, r3, #7
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4013      	ands	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004910:	68bb      	ldr	r3, [r7, #8]
}
 8004912:	4618      	mov	r0, r3
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f003 0301 	and.w	r3, r3, #1
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004954:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004958:	f023 0307 	bic.w	r3, r3, #7
 800495c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800496c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004970:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	460b      	mov	r3, r1
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	333c      	adds	r3, #60	; 0x3c
 8004996:	3304      	adds	r3, #4
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4a26      	ldr	r2, [pc, #152]	; (8004a38 <USB_EP0_OutStart+0xb8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d90a      	bls.n	80049ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049b4:	d101      	bne.n	80049ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e037      	b.n	8004a2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	461a      	mov	r2, r3
 80049c2:	2300      	movs	r3, #0
 80049c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e8:	f043 0318 	orr.w	r3, r3, #24
 80049ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a02:	7afb      	ldrb	r3, [r7, #11]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d10f      	bne.n	8004a28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	461a      	mov	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	4f54300a 	.word	0x4f54300a

08004a3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <USB_CoreReset+0x64>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e01b      	b.n	8004a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	daf2      	bge.n	8004a48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f043 0201 	orr.w	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <USB_CoreReset+0x64>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d901      	bls.n	8004a84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e006      	b.n	8004a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d0f0      	beq.n	8004a72 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	00030d40 	.word	0x00030d40

08004aa4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004ab0:	2054      	movs	r0, #84	; 0x54
 8004ab2:	f002 fae1 	bl	8007078 <USBD_static_malloc>
 8004ab6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	32b0      	adds	r2, #176	; 0xb0
 8004ac8:	2100      	movs	r1, #0
 8004aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e08b      	b.n	8004bea <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	32b0      	adds	r2, #176	; 0xb0
 8004adc:	68f9      	ldr	r1, [r7, #12]
 8004ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	32b0      	adds	r2, #176	; 0xb0
 8004aec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	7c1b      	ldrb	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11b      	bne.n	8004b36 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004afe:	4b3d      	ldr	r3, [pc, #244]	; (8004bf4 <USBD_CUSTOM_HID_Init+0x150>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f003 020f 	and.w	r2, r3, #15
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	3326      	adds	r3, #38	; 0x26
 8004b14:	2205      	movs	r2, #5
 8004b16:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004b18:	4b37      	ldr	r3, [pc, #220]	; (8004bf8 <USBD_CUSTOM_HID_Init+0x154>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	f003 020f 	and.w	r2, r3, #15
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8004b30:	2205      	movs	r2, #5
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	e01a      	b.n	8004b6c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004b36:	4b2f      	ldr	r3, [pc, #188]	; (8004bf4 <USBD_CUSTOM_HID_Init+0x150>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	f003 020f 	and.w	r2, r3, #15
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	3326      	adds	r3, #38	; 0x26
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004b50:	4b29      	ldr	r3, [pc, #164]	; (8004bf8 <USBD_CUSTOM_HID_Init+0x154>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	f003 020f 	and.w	r2, r3, #15
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8004b68:	2201      	movs	r2, #1
 8004b6a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004b6c:	4b21      	ldr	r3, [pc, #132]	; (8004bf4 <USBD_CUSTOM_HID_Init+0x150>)
 8004b6e:	7819      	ldrb	r1, [r3, #0]
 8004b70:	2340      	movs	r3, #64	; 0x40
 8004b72:	2203      	movs	r2, #3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f002 f96e 	bl	8006e56 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004b7a:	4b1e      	ldr	r3, [pc, #120]	; (8004bf4 <USBD_CUSTOM_HID_Init+0x150>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	f003 020f 	and.w	r2, r3, #15
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	3324      	adds	r3, #36	; 0x24
 8004b90:	2201      	movs	r2, #1
 8004b92:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004b94:	4b18      	ldr	r3, [pc, #96]	; (8004bf8 <USBD_CUSTOM_HID_Init+0x154>)
 8004b96:	7819      	ldrb	r1, [r3, #0]
 8004b98:	2340      	movs	r3, #64	; 0x40
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f002 f95a 	bl	8006e56 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8004ba2:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <USBD_CUSTOM_HID_Init+0x154>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	f003 020f 	and.w	r2, r3, #15
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004bba:	2201      	movs	r2, #1
 8004bbc:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	33b0      	adds	r3, #176	; 0xb0
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004bda:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <USBD_CUSTOM_HID_Init+0x154>)
 8004bdc:	7819      	ldrb	r1, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	2340      	movs	r3, #64	; 0x40
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f002 fa26 	bl	8007034 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000086 	.word	0x20000086
 8004bf8:	20000087 	.word	0x20000087

08004bfc <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8004c08:	4b37      	ldr	r3, [pc, #220]	; (8004ce8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f002 f947 	bl	8006ea2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8004c14:	4b34      	ldr	r3, [pc, #208]	; (8004ce8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	f003 020f 	and.w	r2, r3, #15
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	3324      	adds	r3, #36	; 0x24
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8004c2e:	4b2e      	ldr	r3, [pc, #184]	; (8004ce8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	f003 020f 	and.w	r2, r3, #15
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	3326      	adds	r3, #38	; 0x26
 8004c44:	2200      	movs	r2, #0
 8004c46:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8004c48:	4b28      	ldr	r3, [pc, #160]	; (8004cec <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f002 f927 	bl	8006ea2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8004c54:	4b25      	ldr	r3, [pc, #148]	; (8004cec <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f003 020f 	and.w	r2, r3, #15
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004c70:	4b1e      	ldr	r3, [pc, #120]	; (8004cec <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	f003 020f 	and.w	r2, r3, #15
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8004c88:	2200      	movs	r2, #0
 8004c8a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	32b0      	adds	r2, #176	; 0xb0
 8004c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01f      	beq.n	8004cde <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	33b0      	adds	r3, #176	; 0xb0
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	32b0      	adds	r2, #176	; 0xb0
 8004cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f002 f9e7 	bl	8007094 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	32b0      	adds	r2, #176	; 0xb0
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000086 	.word	0x20000086
 8004cec:	20000087 	.word	0x20000087

08004cf0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	32b0      	adds	r2, #176	; 0xb0
 8004d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d08:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e0f8      	b.n	8004f16 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d056      	beq.n	8004dde <USBD_CUSTOM_HID_Setup+0xee>
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	f040 80e8 	bne.w	8004f06 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	785b      	ldrb	r3, [r3, #1]
 8004d3a:	3b02      	subs	r3, #2
 8004d3c:	2b09      	cmp	r3, #9
 8004d3e:	d846      	bhi.n	8004dce <USBD_CUSTOM_HID_Setup+0xde>
 8004d40:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <USBD_CUSTOM_HID_Setup+0x58>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004da1 	.word	0x08004da1
 8004d4c:	08004d7f 	.word	0x08004d7f
 8004d50:	08004dcf 	.word	0x08004dcf
 8004d54:	08004dcf 	.word	0x08004dcf
 8004d58:	08004dcf 	.word	0x08004dcf
 8004d5c:	08004dcf 	.word	0x08004dcf
 8004d60:	08004dcf 	.word	0x08004dcf
 8004d64:	08004db1 	.word	0x08004db1
 8004d68:	08004d8f 	.word	0x08004d8f
 8004d6c:	08004d71 	.word	0x08004d71
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	885b      	ldrh	r3, [r3, #2]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8004d7c:	e02e      	b.n	8004ddc <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	3340      	adds	r3, #64	; 0x40
 8004d82:	2201      	movs	r2, #1
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f001 fcca 	bl	8006720 <USBD_CtlSendData>
          break;
 8004d8c:	e026      	b.n	8004ddc <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	885b      	ldrh	r3, [r3, #2]
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8004d9e:	e01d      	b.n	8004ddc <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	3344      	adds	r3, #68	; 0x44
 8004da4:	2201      	movs	r2, #1
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f001 fcb9 	bl	8006720 <USBD_CtlSendData>
          break;
 8004dae:	e015      	b.n	8004ddc <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2201      	movs	r2, #1
 8004db4:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004db6:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	88db      	ldrh	r3, [r3, #6]
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	bf28      	it	cs
 8004dc0:	2340      	movcs	r3, #64	; 0x40
 8004dc2:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f001 fcd6 	bl	8006778 <USBD_CtlPrepareRx>
          break;
 8004dcc:	e006      	b.n	8004ddc <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8004dce:	6839      	ldr	r1, [r7, #0]
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f001 fc34 	bl	800663e <USBD_CtlError>
          ret = USBD_FAIL;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	75fb      	strb	r3, [r7, #23]
          break;
 8004dda:	bf00      	nop
      }
      break;
 8004ddc:	e09a      	b.n	8004f14 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	785b      	ldrb	r3, [r3, #1]
 8004de2:	2b0b      	cmp	r3, #11
 8004de4:	f200 8086 	bhi.w	8004ef4 <USBD_CUSTOM_HID_Setup+0x204>
 8004de8:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <USBD_CUSTOM_HID_Setup+0x100>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e21 	.word	0x08004e21
 8004df4:	08004f03 	.word	0x08004f03
 8004df8:	08004ef5 	.word	0x08004ef5
 8004dfc:	08004ef5 	.word	0x08004ef5
 8004e00:	08004ef5 	.word	0x08004ef5
 8004e04:	08004ef5 	.word	0x08004ef5
 8004e08:	08004e4b 	.word	0x08004e4b
 8004e0c:	08004ef5 	.word	0x08004ef5
 8004e10:	08004ef5 	.word	0x08004ef5
 8004e14:	08004ef5 	.word	0x08004ef5
 8004e18:	08004ea3 	.word	0x08004ea3
 8004e1c:	08004ecd 	.word	0x08004ecd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d107      	bne.n	8004e3c <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e2c:	f107 030e 	add.w	r3, r7, #14
 8004e30:	2202      	movs	r2, #2
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f001 fc73 	bl	8006720 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e3a:	e063      	b.n	8004f04 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8004e3c:	6839      	ldr	r1, [r7, #0]
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f001 fbfd 	bl	800663e <USBD_CtlError>
            ret = USBD_FAIL;
 8004e44:	2303      	movs	r3, #3
 8004e46:	75fb      	strb	r3, [r7, #23]
          break;
 8004e48:	e05c      	b.n	8004f04 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	885b      	ldrh	r3, [r3, #2]
 8004e4e:	0a1b      	lsrs	r3, r3, #8
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b22      	cmp	r3, #34	; 0x22
 8004e54:	d110      	bne.n	8004e78 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	88db      	ldrh	r3, [r3, #6]
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	bf28      	it	cs
 8004e5e:	2320      	movcs	r3, #32
 8004e60:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	33b0      	adds	r3, #176	; 0xb0
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	e00d      	b.n	8004e94 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	885b      	ldrh	r3, [r3, #2]
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b21      	cmp	r3, #33	; 0x21
 8004e82:	d107      	bne.n	8004e94 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8004e84:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <USBD_CUSTOM_HID_Setup+0x230>)
 8004e86:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	88db      	ldrh	r3, [r3, #6]
 8004e8c:	2b09      	cmp	r3, #9
 8004e8e:	bf28      	it	cs
 8004e90:	2309      	movcs	r3, #9
 8004e92:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004e94:	8bfb      	ldrh	r3, [r7, #30]
 8004e96:	461a      	mov	r2, r3
 8004e98:	69b9      	ldr	r1, [r7, #24]
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 fc40 	bl	8006720 <USBD_CtlSendData>
          break;
 8004ea0:	e030      	b.n	8004f04 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d107      	bne.n	8004ebe <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	3348      	adds	r3, #72	; 0x48
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f001 fc32 	bl	8006720 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ebc:	e022      	b.n	8004f04 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8004ebe:	6839      	ldr	r1, [r7, #0]
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f001 fbbc 	bl	800663e <USBD_CtlError>
            ret = USBD_FAIL;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8004eca:	e01b      	b.n	8004f04 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d106      	bne.n	8004ee6 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	885b      	ldrh	r3, [r3, #2]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ee4:	e00e      	b.n	8004f04 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f001 fba8 	bl	800663e <USBD_CtlError>
            ret = USBD_FAIL;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	75fb      	strb	r3, [r7, #23]
          break;
 8004ef2:	e007      	b.n	8004f04 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004ef4:	6839      	ldr	r1, [r7, #0]
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f001 fba1 	bl	800663e <USBD_CtlError>
          ret = USBD_FAIL;
 8004efc:	2303      	movs	r3, #3
 8004efe:	75fb      	strb	r3, [r7, #23]
          break;
 8004f00:	e000      	b.n	8004f04 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8004f02:	bf00      	nop
      }
      break;
 8004f04:	e006      	b.n	8004f14 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8004f06:	6839      	ldr	r1, [r7, #0]
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f001 fb98 	bl	800663e <USBD_CtlError>
      ret = USBD_FAIL;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	75fb      	strb	r3, [r7, #23]
      break;
 8004f12:	bf00      	nop
  }
  return (uint8_t)ret;
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000070 	.word	0x20000070

08004f24 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	32b0      	adds	r2, #176	; 0xb0
 8004f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e021      	b.n	8004f8c <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	32b0      	adds	r2, #176	; 0xb0
 8004f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f56:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d112      	bne.n	8004f8a <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10b      	bne.n	8004f86 <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8004f76:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <USBD_CUSTOM_HID_SendReport+0x70>)
 8004f78:	7819      	ldrb	r1, [r3, #0]
 8004f7a:	88fb      	ldrh	r3, [r7, #6]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f002 f837 	bl	8006ff2 <USBD_LL_Transmit>
 8004f84:	e001      	b.n	8004f8a <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000086 	.word	0x20000086

08004f98 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8004fa0:	2181      	movs	r1, #129	; 0x81
 8004fa2:	4815      	ldr	r0, [pc, #84]	; (8004ff8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8004fa4:	f000 fd13 	bl	80059ce <USBD_GetEpDesc>
 8004fa8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8004faa:	2101      	movs	r1, #1
 8004fac:	4812      	ldr	r0, [pc, #72]	; (8004ff8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8004fae:	f000 fd0e 	bl	80059ce <USBD_GetEpDesc>
 8004fb2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fc2:	711a      	strb	r2, [r3, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fdc:	711a      	strb	r2, [r3, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2229      	movs	r2, #41	; 0x29
 8004fec:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8004fee:	4b02      	ldr	r3, [pc, #8]	; (8004ff8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000044 	.word	0x20000044

08004ffc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005004:	2181      	movs	r1, #129	; 0x81
 8005006:	4815      	ldr	r0, [pc, #84]	; (800505c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005008:	f000 fce1 	bl	80059ce <USBD_GetEpDesc>
 800500c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800500e:	2101      	movs	r1, #1
 8005010:	4812      	ldr	r0, [pc, #72]	; (800505c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005012:	f000 fcdc 	bl	80059ce <USBD_GetEpDesc>
 8005016:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005026:	711a      	strb	r2, [r3, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2205      	movs	r2, #5
 8005030:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d009      	beq.n	800504c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2200      	movs	r2, #0
 800503c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005040:	711a      	strb	r2, [r3, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2205      	movs	r2, #5
 800504a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2229      	movs	r2, #41	; 0x29
 8005050:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005052:	4b02      	ldr	r3, [pc, #8]	; (800505c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20000044 	.word	0x20000044

08005060 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005068:	2181      	movs	r1, #129	; 0x81
 800506a:	4815      	ldr	r0, [pc, #84]	; (80050c0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800506c:	f000 fcaf 	bl	80059ce <USBD_GetEpDesc>
 8005070:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005072:	2101      	movs	r1, #1
 8005074:	4812      	ldr	r0, [pc, #72]	; (80050c0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005076:	f000 fcaa 	bl	80059ce <USBD_GetEpDesc>
 800507a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800508a:	711a      	strb	r2, [r3, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d009      	beq.n	80050b0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2200      	movs	r2, #0
 80050a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050a4:	711a      	strb	r2, [r3, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2201      	movs	r2, #1
 80050ae:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2229      	movs	r2, #41	; 0x29
 80050b4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80050b6:	4b02      	ldr	r3, [pc, #8]	; (80050c0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20000044 	.word	0x20000044

080050c4 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	32b0      	adds	r2, #176	; 0xb0
 80050da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	460b      	mov	r3, r1
 80050fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	32b0      	adds	r2, #176	; 0xb0
 8005108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005110:	2303      	movs	r3, #3
 8005112:	e014      	b.n	800513e <USBD_CUSTOM_HID_DataOut+0x4c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	32b0      	adds	r2, #176	; 0xb0
 800511e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005122:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	33b0      	adds	r3, #176	; 0xb0
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4610      	mov	r0, r2
 800513a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	32b0      	adds	r2, #176	; 0xb0
 800515a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005162:	2303      	movs	r3, #3
 8005164:	e00f      	b.n	8005186 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	32b0      	adds	r2, #176	; 0xb0
 8005170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005174:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005176:	4b06      	ldr	r3, [pc, #24]	; (8005190 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005178:	7819      	ldrb	r1, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	2340      	movs	r3, #64	; 0x40
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f001 ff58 	bl	8007034 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000087 	.word	0x20000087

08005194 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	32b0      	adds	r2, #176	; 0xb0
 80051a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051aa:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e013      	b.n	80051de <USBD_CUSTOM_HID_EP0_RxReady+0x4a>
  }

  if (hhid->IsReportAvailable == 1U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d10e      	bne.n	80051dc <USBD_CUSTOM_HID_EP0_RxReady+0x48>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	33b0      	adds	r3, #176	; 0xb0
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4610      	mov	r0, r2
 80051d4:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	220a      	movs	r2, #10
 80051f4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80051f6:	4b03      	ldr	r3, [pc, #12]	; (8005204 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	2000007c 	.word	0x2000007c

08005208 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005218:	2303      	movs	r3, #3
 800521a:	e009      	b.n	8005230 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	33b0      	adds	r3, #176	; 0xb0
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	4613      	mov	r3, r2
 8005248:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005250:	2303      	movs	r3, #3
 8005252:	e01f      	b.n	8005294 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	79fa      	ldrb	r2, [r7, #7]
 8005286:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f001 fd7d 	bl	8006d88 <USBD_LL_Init>
 800528e:	4603      	mov	r3, r0
 8005290:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005292:	7dfb      	ldrb	r3, [r7, #23]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e025      	b.n	8005300 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	32ae      	adds	r2, #174	; 0xae
 80052c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00f      	beq.n	80052f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	32ae      	adds	r2, #174	; 0xae
 80052da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	f107 020e 	add.w	r2, r7, #14
 80052e4:	4610      	mov	r0, r2
 80052e6:	4798      	blx	r3
 80052e8:	4602      	mov	r2, r0
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f001 fd85 	bl	8006e20 <USBD_LL_Start>
 8005316:	4603      	mov	r3, r0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005328:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800532a:	4618      	mov	r0, r3
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	460b      	mov	r3, r1
 8005340:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d009      	beq.n	8005364 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	78fa      	ldrb	r2, [r7, #3]
 800535a:	4611      	mov	r1, r2
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
 8005360:	4603      	mov	r3, r0
 8005362:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	4611      	mov	r1, r2
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	4798      	blx	r3
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005394:	2303      	movs	r3, #3
 8005396:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053b2:	6839      	ldr	r1, [r7, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f001 f908 	bl	80065ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80053c8:	461a      	mov	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053d6:	f003 031f 	and.w	r3, r3, #31
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d01a      	beq.n	8005414 <USBD_LL_SetupStage+0x72>
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d822      	bhi.n	8005428 <USBD_LL_SetupStage+0x86>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <USBD_LL_SetupStage+0x4a>
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d00a      	beq.n	8005400 <USBD_LL_SetupStage+0x5e>
 80053ea:	e01d      	b.n	8005428 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053f2:	4619      	mov	r1, r3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fb5f 	bl	8005ab8 <USBD_StdDevReq>
 80053fa:	4603      	mov	r3, r0
 80053fc:	73fb      	strb	r3, [r7, #15]
      break;
 80053fe:	e020      	b.n	8005442 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fbc7 	bl	8005b9c <USBD_StdItfReq>
 800540e:	4603      	mov	r3, r0
 8005410:	73fb      	strb	r3, [r7, #15]
      break;
 8005412:	e016      	b.n	8005442 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fc29 	bl	8005c74 <USBD_StdEPReq>
 8005422:	4603      	mov	r3, r0
 8005424:	73fb      	strb	r3, [r7, #15]
      break;
 8005426:	e00c      	b.n	8005442 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800542e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005432:	b2db      	uxtb	r3, r3
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f001 fd52 	bl	8006ee0 <USBD_LL_StallEP>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
      break;
 8005440:	bf00      	nop
  }

  return ret;
 8005442:	7bfb      	ldrb	r3, [r7, #15]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	460b      	mov	r3, r1
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800545e:	7afb      	ldrb	r3, [r7, #11]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d16e      	bne.n	8005542 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800546a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005472:	2b03      	cmp	r3, #3
 8005474:	f040 8098 	bne.w	80055a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	429a      	cmp	r2, r3
 8005482:	d913      	bls.n	80054ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	1ad2      	subs	r2, r2, r3
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	4293      	cmp	r3, r2
 800549c:	bf28      	it	cs
 800549e:	4613      	movcs	r3, r2
 80054a0:	461a      	mov	r2, r3
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f001 f984 	bl	80067b2 <USBD_CtlContinueRx>
 80054aa:	e07d      	b.n	80055a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d014      	beq.n	80054e4 <USBD_LL_DataOutStage+0x98>
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d81d      	bhi.n	80054fa <USBD_LL_DataOutStage+0xae>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <USBD_LL_DataOutStage+0x7c>
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d003      	beq.n	80054ce <USBD_LL_DataOutStage+0x82>
 80054c6:	e018      	b.n	80054fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	75bb      	strb	r3, [r7, #22]
            break;
 80054cc:	e018      	b.n	8005500 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	4619      	mov	r1, r3
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fa5e 	bl	800599a <USBD_CoreFindIF>
 80054de:	4603      	mov	r3, r0
 80054e0:	75bb      	strb	r3, [r7, #22]
            break;
 80054e2:	e00d      	b.n	8005500 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	4619      	mov	r1, r3
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fa60 	bl	80059b4 <USBD_CoreFindEP>
 80054f4:	4603      	mov	r3, r0
 80054f6:	75bb      	strb	r3, [r7, #22]
            break;
 80054f8:	e002      	b.n	8005500 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	75bb      	strb	r3, [r7, #22]
            break;
 80054fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005500:	7dbb      	ldrb	r3, [r7, #22]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d119      	bne.n	800553a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b03      	cmp	r3, #3
 8005510:	d113      	bne.n	800553a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005512:	7dba      	ldrb	r2, [r7, #22]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	32ae      	adds	r2, #174	; 0xae
 8005518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005522:	7dba      	ldrb	r2, [r7, #22]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800552a:	7dba      	ldrb	r2, [r7, #22]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	32ae      	adds	r2, #174	; 0xae
 8005530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f001 f94a 	bl	80067d4 <USBD_CtlSendStatus>
 8005540:	e032      	b.n	80055a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005542:	7afb      	ldrb	r3, [r7, #11]
 8005544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005548:	b2db      	uxtb	r3, r3
 800554a:	4619      	mov	r1, r3
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 fa31 	bl	80059b4 <USBD_CoreFindEP>
 8005552:	4603      	mov	r3, r0
 8005554:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005556:	7dbb      	ldrb	r3, [r7, #22]
 8005558:	2bff      	cmp	r3, #255	; 0xff
 800555a:	d025      	beq.n	80055a8 <USBD_LL_DataOutStage+0x15c>
 800555c:	7dbb      	ldrb	r3, [r7, #22]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d122      	bne.n	80055a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b03      	cmp	r3, #3
 800556c:	d117      	bne.n	800559e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800556e:	7dba      	ldrb	r2, [r7, #22]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	32ae      	adds	r2, #174	; 0xae
 8005574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00f      	beq.n	800559e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800557e:	7dba      	ldrb	r2, [r7, #22]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005586:	7dba      	ldrb	r2, [r7, #22]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	32ae      	adds	r2, #174	; 0xae
 800558c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	7afa      	ldrb	r2, [r7, #11]
 8005594:	4611      	mov	r1, r2
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	4798      	blx	r3
 800559a:	4603      	mov	r3, r0
 800559c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	e000      	b.n	80055aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b086      	sub	sp, #24
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	460b      	mov	r3, r1
 80055bc:	607a      	str	r2, [r7, #4]
 80055be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80055c0:	7afb      	ldrb	r3, [r7, #11]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d16f      	bne.n	80056a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3314      	adds	r3, #20
 80055ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d15a      	bne.n	800568c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d914      	bls.n	800560c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	1ad2      	subs	r2, r2, r3
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	461a      	mov	r2, r3
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f001 f8ac 	bl	8006756 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055fe:	2300      	movs	r3, #0
 8005600:	2200      	movs	r2, #0
 8005602:	2100      	movs	r1, #0
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f001 fd15 	bl	8007034 <USBD_LL_PrepareReceive>
 800560a:	e03f      	b.n	800568c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	429a      	cmp	r2, r3
 8005616:	d11c      	bne.n	8005652 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005620:	429a      	cmp	r2, r3
 8005622:	d316      	bcc.n	8005652 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800562e:	429a      	cmp	r2, r3
 8005630:	d20f      	bcs.n	8005652 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005632:	2200      	movs	r2, #0
 8005634:	2100      	movs	r1, #0
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f001 f88d 	bl	8006756 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005644:	2300      	movs	r3, #0
 8005646:	2200      	movs	r2, #0
 8005648:	2100      	movs	r1, #0
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f001 fcf2 	bl	8007034 <USBD_LL_PrepareReceive>
 8005650:	e01c      	b.n	800568c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b03      	cmp	r3, #3
 800565c:	d10f      	bne.n	800567e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800567e:	2180      	movs	r1, #128	; 0x80
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f001 fc2d 	bl	8006ee0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f001 f8b7 	bl	80067fa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d03a      	beq.n	800570c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff fe42 	bl	8005320 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80056a4:	e032      	b.n	800570c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80056a6:	7afb      	ldrb	r3, [r7, #11]
 80056a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	4619      	mov	r1, r3
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f97f 	bl	80059b4 <USBD_CoreFindEP>
 80056b6:	4603      	mov	r3, r0
 80056b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
 80056bc:	2bff      	cmp	r3, #255	; 0xff
 80056be:	d025      	beq.n	800570c <USBD_LL_DataInStage+0x15a>
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d122      	bne.n	800570c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d11c      	bne.n	800570c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80056d2:	7dfa      	ldrb	r2, [r7, #23]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	32ae      	adds	r2, #174	; 0xae
 80056d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d014      	beq.n	800570c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80056e2:	7dfa      	ldrb	r2, [r7, #23]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80056ea:	7dfa      	ldrb	r2, [r7, #23]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	32ae      	adds	r2, #174	; 0xae
 80056f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	7afa      	ldrb	r2, [r7, #11]
 80056f8:	4611      	mov	r1, r2
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	4798      	blx	r3
 80056fe:	4603      	mov	r3, r0
 8005700:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005702:	7dbb      	ldrb	r3, [r7, #22]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005708:	7dbb      	ldrb	r3, [r7, #22]
 800570a:	e000      	b.n	800570e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d014      	beq.n	800577c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00e      	beq.n	800577c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6852      	ldr	r2, [r2, #4]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	4611      	mov	r1, r2
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	4798      	blx	r3
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005778:	2303      	movs	r3, #3
 800577a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800577c:	2340      	movs	r3, #64	; 0x40
 800577e:	2200      	movs	r2, #0
 8005780:	2100      	movs	r1, #0
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f001 fb67 	bl	8006e56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2240      	movs	r2, #64	; 0x40
 8005794:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005798:	2340      	movs	r3, #64	; 0x40
 800579a:	2200      	movs	r2, #0
 800579c:	2180      	movs	r1, #128	; 0x80
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f001 fb59 	bl	8006e56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2240      	movs	r2, #64	; 0x40
 80057ae:	621a      	str	r2, [r3, #32]

  return ret;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	460b      	mov	r3, r1
 80057c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	78fa      	ldrb	r2, [r7, #3]
 80057ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2204      	movs	r2, #4
 80057f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b04      	cmp	r3, #4
 8005818:	d106      	bne.n	8005828 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005820:	b2da      	uxtb	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b03      	cmp	r3, #3
 8005848:	d110      	bne.n	800586c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00b      	beq.n	800586c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	460b      	mov	r3, r1
 8005880:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	32ae      	adds	r2, #174	; 0xae
 800588c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005894:	2303      	movs	r3, #3
 8005896:	e01c      	b.n	80058d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d115      	bne.n	80058d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	32ae      	adds	r2, #174	; 0xae
 80058ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00b      	beq.n	80058d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	32ae      	adds	r2, #174	; 0xae
 80058c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	78fa      	ldrb	r2, [r7, #3]
 80058ca:	4611      	mov	r1, r2
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	32ae      	adds	r2, #174	; 0xae
 80058f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e01c      	b.n	8005936 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b03      	cmp	r3, #3
 8005906:	d115      	bne.n	8005934 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	32ae      	adds	r2, #174	; 0xae
 8005912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00b      	beq.n	8005934 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	32ae      	adds	r2, #174	; 0xae
 8005926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	4611      	mov	r1, r2
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00e      	beq.n	8005990 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6852      	ldr	r2, [r2, #4]
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	4611      	mov	r1, r2
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800598c:	2303      	movs	r3, #3
 800598e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005990:	7bfb      	ldrb	r3, [r7, #15]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80059a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80059c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	460b      	mov	r3, r1
 80059d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	885b      	ldrh	r3, [r3, #2]
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d920      	bls.n	8005a38 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80059fe:	e013      	b.n	8005a28 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005a00:	f107 030a 	add.w	r3, r7, #10
 8005a04:	4619      	mov	r1, r3
 8005a06:	6978      	ldr	r0, [r7, #20]
 8005a08:	f000 f81b 	bl	8005a42 <USBD_GetNextDesc>
 8005a0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	d108      	bne.n	8005a28 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	789b      	ldrb	r3, [r3, #2]
 8005a1e:	78fa      	ldrb	r2, [r7, #3]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d008      	beq.n	8005a36 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	885b      	ldrh	r3, [r3, #2]
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	897b      	ldrh	r3, [r7, #10]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d8e5      	bhi.n	8005a00 <USBD_GetEpDesc+0x32>
 8005a34:	e000      	b.n	8005a38 <USBD_GetEpDesc+0x6a>
          break;
 8005a36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005a38:	693b      	ldr	r3, [r7, #16]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	881a      	ldrh	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	3301      	adds	r3, #1
 8005a92:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005a9a:	8a3b      	ldrh	r3, [r7, #16]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	b21a      	sxth	r2, r3
 8005aa0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	b21b      	sxth	r3, r3
 8005aa8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005aaa:	89fb      	ldrh	r3, [r7, #14]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d005      	beq.n	8005ade <USBD_StdDevReq+0x26>
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d857      	bhi.n	8005b86 <USBD_StdDevReq+0xce>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00f      	beq.n	8005afa <USBD_StdDevReq+0x42>
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d153      	bne.n	8005b86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	32ae      	adds	r2, #174	; 0xae
 8005ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
 8005af4:	4603      	mov	r3, r0
 8005af6:	73fb      	strb	r3, [r7, #15]
      break;
 8005af8:	e04a      	b.n	8005b90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	2b09      	cmp	r3, #9
 8005b00:	d83b      	bhi.n	8005b7a <USBD_StdDevReq+0xc2>
 8005b02:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <USBD_StdDevReq+0x50>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005b5d 	.word	0x08005b5d
 8005b0c:	08005b71 	.word	0x08005b71
 8005b10:	08005b7b 	.word	0x08005b7b
 8005b14:	08005b67 	.word	0x08005b67
 8005b18:	08005b7b 	.word	0x08005b7b
 8005b1c:	08005b3b 	.word	0x08005b3b
 8005b20:	08005b31 	.word	0x08005b31
 8005b24:	08005b7b 	.word	0x08005b7b
 8005b28:	08005b53 	.word	0x08005b53
 8005b2c:	08005b45 	.word	0x08005b45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fa3c 	bl	8005fb0 <USBD_GetDescriptor>
          break;
 8005b38:	e024      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fba1 	bl	8006284 <USBD_SetAddress>
          break;
 8005b42:	e01f      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fbe0 	bl	800630c <USBD_SetConfig>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	73fb      	strb	r3, [r7, #15]
          break;
 8005b50:	e018      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fc83 	bl	8006460 <USBD_GetConfig>
          break;
 8005b5a:	e013      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fcb4 	bl	80064cc <USBD_GetStatus>
          break;
 8005b64:	e00e      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fce3 	bl	8006534 <USBD_SetFeature>
          break;
 8005b6e:	e009      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fd07 	bl	8006586 <USBD_ClrFeature>
          break;
 8005b78:	e004      	b.n	8005b84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fd5e 	bl	800663e <USBD_CtlError>
          break;
 8005b82:	bf00      	nop
      }
      break;
 8005b84:	e004      	b.n	8005b90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fd58 	bl	800663e <USBD_CtlError>
      break;
 8005b8e:	bf00      	nop
  }

  return ret;
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop

08005b9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d005      	beq.n	8005bc2 <USBD_StdItfReq+0x26>
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d852      	bhi.n	8005c60 <USBD_StdItfReq+0xc4>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <USBD_StdItfReq+0x26>
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d14e      	bne.n	8005c60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d840      	bhi.n	8005c52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	889b      	ldrh	r3, [r3, #4]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d836      	bhi.n	8005c48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	889b      	ldrh	r3, [r3, #4]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff fed9 	bl	800599a <USBD_CoreFindIF>
 8005be8:	4603      	mov	r3, r0
 8005bea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005bec:	7bbb      	ldrb	r3, [r7, #14]
 8005bee:	2bff      	cmp	r3, #255	; 0xff
 8005bf0:	d01d      	beq.n	8005c2e <USBD_StdItfReq+0x92>
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11a      	bne.n	8005c2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005bf8:	7bba      	ldrb	r2, [r7, #14]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	32ae      	adds	r2, #174	; 0xae
 8005bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00f      	beq.n	8005c28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005c08:	7bba      	ldrb	r2, [r7, #14]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005c10:	7bba      	ldrb	r2, [r7, #14]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	32ae      	adds	r2, #174	; 0xae
 8005c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	4798      	blx	r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005c26:	e004      	b.n	8005c32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005c2c:	e001      	b.n	8005c32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	88db      	ldrh	r3, [r3, #6]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d110      	bne.n	8005c5c <USBD_StdItfReq+0xc0>
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10d      	bne.n	8005c5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fdc7 	bl	80067d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005c46:	e009      	b.n	8005c5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fcf7 	bl	800663e <USBD_CtlError>
          break;
 8005c50:	e004      	b.n	8005c5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fcf2 	bl	800663e <USBD_CtlError>
          break;
 8005c5a:	e000      	b.n	8005c5e <USBD_StdItfReq+0xc2>
          break;
 8005c5c:	bf00      	nop
      }
      break;
 8005c5e:	e004      	b.n	8005c6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fceb 	bl	800663e <USBD_CtlError>
      break;
 8005c68:	bf00      	nop
  }

  return ret;
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	889b      	ldrh	r3, [r3, #4]
 8005c86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d007      	beq.n	8005ca4 <USBD_StdEPReq+0x30>
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	f200 817f 	bhi.w	8005f98 <USBD_StdEPReq+0x324>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d02a      	beq.n	8005cf4 <USBD_StdEPReq+0x80>
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	f040 817a 	bne.w	8005f98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff fe83 	bl	80059b4 <USBD_CoreFindEP>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cb2:	7b7b      	ldrb	r3, [r7, #13]
 8005cb4:	2bff      	cmp	r3, #255	; 0xff
 8005cb6:	f000 8174 	beq.w	8005fa2 <USBD_StdEPReq+0x32e>
 8005cba:	7b7b      	ldrb	r3, [r7, #13]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f040 8170 	bne.w	8005fa2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005cc2:	7b7a      	ldrb	r2, [r7, #13]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005cca:	7b7a      	ldrb	r2, [r7, #13]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	32ae      	adds	r2, #174	; 0xae
 8005cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 8163 	beq.w	8005fa2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005cdc:	7b7a      	ldrb	r2, [r7, #13]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	32ae      	adds	r2, #174	; 0xae
 8005ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	4798      	blx	r3
 8005cee:	4603      	mov	r3, r0
 8005cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cf2:	e156      	b.n	8005fa2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d008      	beq.n	8005d0e <USBD_StdEPReq+0x9a>
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	f300 8145 	bgt.w	8005f8c <USBD_StdEPReq+0x318>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 809b 	beq.w	8005e3e <USBD_StdEPReq+0x1ca>
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d03c      	beq.n	8005d86 <USBD_StdEPReq+0x112>
 8005d0c:	e13e      	b.n	8005f8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d002      	beq.n	8005d20 <USBD_StdEPReq+0xac>
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d016      	beq.n	8005d4c <USBD_StdEPReq+0xd8>
 8005d1e:	e02c      	b.n	8005d7a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00d      	beq.n	8005d42 <USBD_StdEPReq+0xce>
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
 8005d28:	2b80      	cmp	r3, #128	; 0x80
 8005d2a:	d00a      	beq.n	8005d42 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d2c:	7bbb      	ldrb	r3, [r7, #14]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 f8d5 	bl	8006ee0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d36:	2180      	movs	r1, #128	; 0x80
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 f8d1 	bl	8006ee0 <USBD_LL_StallEP>
 8005d3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d40:	e020      	b.n	8005d84 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fc7a 	bl	800663e <USBD_CtlError>
              break;
 8005d4a:	e01b      	b.n	8005d84 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	885b      	ldrh	r3, [r3, #2]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10e      	bne.n	8005d72 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d54:	7bbb      	ldrb	r3, [r7, #14]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <USBD_StdEPReq+0xfe>
 8005d5a:	7bbb      	ldrb	r3, [r7, #14]
 8005d5c:	2b80      	cmp	r3, #128	; 0x80
 8005d5e:	d008      	beq.n	8005d72 <USBD_StdEPReq+0xfe>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	88db      	ldrh	r3, [r3, #6]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d104      	bne.n	8005d72 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f001 f8b7 	bl	8006ee0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fd2e 	bl	80067d4 <USBD_CtlSendStatus>

              break;
 8005d78:	e004      	b.n	8005d84 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fc5e 	bl	800663e <USBD_CtlError>
              break;
 8005d82:	bf00      	nop
          }
          break;
 8005d84:	e107      	b.n	8005f96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d002      	beq.n	8005d98 <USBD_StdEPReq+0x124>
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d016      	beq.n	8005dc4 <USBD_StdEPReq+0x150>
 8005d96:	e04b      	b.n	8005e30 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d98:	7bbb      	ldrb	r3, [r7, #14]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <USBD_StdEPReq+0x146>
 8005d9e:	7bbb      	ldrb	r3, [r7, #14]
 8005da0:	2b80      	cmp	r3, #128	; 0x80
 8005da2:	d00a      	beq.n	8005dba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005da4:	7bbb      	ldrb	r3, [r7, #14]
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 f899 	bl	8006ee0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f001 f895 	bl	8006ee0 <USBD_LL_StallEP>
 8005db6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005db8:	e040      	b.n	8005e3c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fc3e 	bl	800663e <USBD_CtlError>
              break;
 8005dc2:	e03b      	b.n	8005e3c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	885b      	ldrh	r3, [r3, #2]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d136      	bne.n	8005e3a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d004      	beq.n	8005de0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005dd6:	7bbb      	ldrb	r3, [r7, #14]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f001 f89f 	bl	8006f1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fcf7 	bl	80067d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005de6:	7bbb      	ldrb	r3, [r7, #14]
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff fde2 	bl	80059b4 <USBD_CoreFindEP>
 8005df0:	4603      	mov	r3, r0
 8005df2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005df4:	7b7b      	ldrb	r3, [r7, #13]
 8005df6:	2bff      	cmp	r3, #255	; 0xff
 8005df8:	d01f      	beq.n	8005e3a <USBD_StdEPReq+0x1c6>
 8005dfa:	7b7b      	ldrb	r3, [r7, #13]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d11c      	bne.n	8005e3a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005e00:	7b7a      	ldrb	r2, [r7, #13]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005e08:	7b7a      	ldrb	r2, [r7, #13]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	32ae      	adds	r2, #174	; 0xae
 8005e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d010      	beq.n	8005e3a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005e18:	7b7a      	ldrb	r2, [r7, #13]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	32ae      	adds	r2, #174	; 0xae
 8005e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4798      	blx	r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005e2e:	e004      	b.n	8005e3a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fc03 	bl	800663e <USBD_CtlError>
              break;
 8005e38:	e000      	b.n	8005e3c <USBD_StdEPReq+0x1c8>
              break;
 8005e3a:	bf00      	nop
          }
          break;
 8005e3c:	e0ab      	b.n	8005f96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d002      	beq.n	8005e50 <USBD_StdEPReq+0x1dc>
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d032      	beq.n	8005eb4 <USBD_StdEPReq+0x240>
 8005e4e:	e097      	b.n	8005f80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e50:	7bbb      	ldrb	r3, [r7, #14]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d007      	beq.n	8005e66 <USBD_StdEPReq+0x1f2>
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
 8005e58:	2b80      	cmp	r3, #128	; 0x80
 8005e5a:	d004      	beq.n	8005e66 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fbed 	bl	800663e <USBD_CtlError>
                break;
 8005e64:	e091      	b.n	8005f8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da0b      	bge.n	8005e86 <USBD_StdEPReq+0x212>
 8005e6e:	7bbb      	ldrb	r3, [r7, #14]
 8005e70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	3310      	adds	r3, #16
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	4413      	add	r3, r2
 8005e82:	3304      	adds	r3, #4
 8005e84:	e00b      	b.n	8005e9e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e86:	7bbb      	ldrb	r3, [r7, #14]
 8005e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fc37 	bl	8006720 <USBD_CtlSendData>
              break;
 8005eb2:	e06a      	b.n	8005f8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	da11      	bge.n	8005ee0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ebc:	7bbb      	ldrb	r3, [r7, #14]
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	3324      	adds	r3, #36	; 0x24
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d117      	bne.n	8005f06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fbb0 	bl	800663e <USBD_CtlError>
                  break;
 8005ede:	e054      	b.n	8005f8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
 8005ee2:	f003 020f 	and.w	r2, r3, #15
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fb9d 	bl	800663e <USBD_CtlError>
                  break;
 8005f04:	e041      	b.n	8005f8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da0b      	bge.n	8005f26 <USBD_StdEPReq+0x2b2>
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	3310      	adds	r3, #16
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4413      	add	r3, r2
 8005f22:	3304      	adds	r3, #4
 8005f24:	e00b      	b.n	8005f3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f26:	7bbb      	ldrb	r3, [r7, #14]
 8005f28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f40:	7bbb      	ldrb	r3, [r7, #14]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <USBD_StdEPReq+0x2d8>
 8005f46:	7bbb      	ldrb	r3, [r7, #14]
 8005f48:	2b80      	cmp	r3, #128	; 0x80
 8005f4a:	d103      	bne.n	8005f54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	e00e      	b.n	8005f72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005f54:	7bbb      	ldrb	r3, [r7, #14]
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 ffff 	bl	8006f5c <USBD_LL_IsStallEP>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2201      	movs	r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	e002      	b.n	8005f72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2202      	movs	r2, #2
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fbd1 	bl	8006720 <USBD_CtlSendData>
              break;
 8005f7e:	e004      	b.n	8005f8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fb5b 	bl	800663e <USBD_CtlError>
              break;
 8005f88:	bf00      	nop
          }
          break;
 8005f8a:	e004      	b.n	8005f96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fb55 	bl	800663e <USBD_CtlError>
          break;
 8005f94:	bf00      	nop
      }
      break;
 8005f96:	e005      	b.n	8005fa4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fb4f 	bl	800663e <USBD_CtlError>
      break;
 8005fa0:	e000      	b.n	8005fa4 <USBD_StdEPReq+0x330>
      break;
 8005fa2:	bf00      	nop
  }

  return ret;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	885b      	ldrh	r3, [r3, #2]
 8005fca:	0a1b      	lsrs	r3, r3, #8
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	2b06      	cmp	r3, #6
 8005fd2:	f200 8128 	bhi.w	8006226 <USBD_GetDescriptor+0x276>
 8005fd6:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <USBD_GetDescriptor+0x2c>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08005ff9 	.word	0x08005ff9
 8005fe0:	08006011 	.word	0x08006011
 8005fe4:	08006051 	.word	0x08006051
 8005fe8:	08006227 	.word	0x08006227
 8005fec:	08006227 	.word	0x08006227
 8005ff0:	080061c7 	.word	0x080061c7
 8005ff4:	080061f3 	.word	0x080061f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	7c12      	ldrb	r2, [r2, #16]
 8006004:	f107 0108 	add.w	r1, r7, #8
 8006008:	4610      	mov	r0, r2
 800600a:	4798      	blx	r3
 800600c:	60f8      	str	r0, [r7, #12]
      break;
 800600e:	e112      	b.n	8006236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	7c1b      	ldrb	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10d      	bne.n	8006034 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	f107 0208 	add.w	r2, r7, #8
 8006024:	4610      	mov	r0, r2
 8006026:	4798      	blx	r3
 8006028:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3301      	adds	r3, #1
 800602e:	2202      	movs	r2, #2
 8006030:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006032:	e100      	b.n	8006236 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	f107 0208 	add.w	r2, r7, #8
 8006040:	4610      	mov	r0, r2
 8006042:	4798      	blx	r3
 8006044:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3301      	adds	r3, #1
 800604a:	2202      	movs	r2, #2
 800604c:	701a      	strb	r2, [r3, #0]
      break;
 800604e:	e0f2      	b.n	8006236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	885b      	ldrh	r3, [r3, #2]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b05      	cmp	r3, #5
 8006058:	f200 80ac 	bhi.w	80061b4 <USBD_GetDescriptor+0x204>
 800605c:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <USBD_GetDescriptor+0xb4>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	0800607d 	.word	0x0800607d
 8006068:	080060b1 	.word	0x080060b1
 800606c:	080060e5 	.word	0x080060e5
 8006070:	08006119 	.word	0x08006119
 8006074:	0800614d 	.word	0x0800614d
 8006078:	08006181 	.word	0x08006181
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	7c12      	ldrb	r2, [r2, #16]
 8006094:	f107 0108 	add.w	r1, r7, #8
 8006098:	4610      	mov	r0, r2
 800609a:	4798      	blx	r3
 800609c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800609e:	e091      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 facb 	bl	800663e <USBD_CtlError>
            err++;
 80060a8:	7afb      	ldrb	r3, [r7, #11]
 80060aa:	3301      	adds	r3, #1
 80060ac:	72fb      	strb	r3, [r7, #11]
          break;
 80060ae:	e089      	b.n	80061c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	7c12      	ldrb	r2, [r2, #16]
 80060c8:	f107 0108 	add.w	r1, r7, #8
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
 80060d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060d2:	e077      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fab1 	bl	800663e <USBD_CtlError>
            err++;
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	3301      	adds	r3, #1
 80060e0:	72fb      	strb	r3, [r7, #11]
          break;
 80060e2:	e06f      	b.n	80061c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	7c12      	ldrb	r2, [r2, #16]
 80060fc:	f107 0108 	add.w	r1, r7, #8
 8006100:	4610      	mov	r0, r2
 8006102:	4798      	blx	r3
 8006104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006106:	e05d      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fa97 	bl	800663e <USBD_CtlError>
            err++;
 8006110:	7afb      	ldrb	r3, [r7, #11]
 8006112:	3301      	adds	r3, #1
 8006114:	72fb      	strb	r3, [r7, #11]
          break;
 8006116:	e055      	b.n	80061c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00b      	beq.n	800613c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	7c12      	ldrb	r2, [r2, #16]
 8006130:	f107 0108 	add.w	r1, r7, #8
 8006134:	4610      	mov	r0, r2
 8006136:	4798      	blx	r3
 8006138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800613a:	e043      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa7d 	bl	800663e <USBD_CtlError>
            err++;
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	3301      	adds	r3, #1
 8006148:	72fb      	strb	r3, [r7, #11]
          break;
 800614a:	e03b      	b.n	80061c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	7c12      	ldrb	r2, [r2, #16]
 8006164:	f107 0108 	add.w	r1, r7, #8
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
 800616c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800616e:	e029      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fa63 	bl	800663e <USBD_CtlError>
            err++;
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	3301      	adds	r3, #1
 800617c:	72fb      	strb	r3, [r7, #11]
          break;
 800617e:	e021      	b.n	80061c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00b      	beq.n	80061a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	7c12      	ldrb	r2, [r2, #16]
 8006198:	f107 0108 	add.w	r1, r7, #8
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
 80061a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061a2:	e00f      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fa49 	bl	800663e <USBD_CtlError>
            err++;
 80061ac:	7afb      	ldrb	r3, [r7, #11]
 80061ae:	3301      	adds	r3, #1
 80061b0:	72fb      	strb	r3, [r7, #11]
          break;
 80061b2:	e007      	b.n	80061c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fa41 	bl	800663e <USBD_CtlError>
          err++;
 80061bc:	7afb      	ldrb	r3, [r7, #11]
 80061be:	3301      	adds	r3, #1
 80061c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80061c2:	bf00      	nop
      }
      break;
 80061c4:	e037      	b.n	8006236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	7c1b      	ldrb	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d6:	f107 0208 	add.w	r2, r7, #8
 80061da:	4610      	mov	r0, r2
 80061dc:	4798      	blx	r3
 80061de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061e0:	e029      	b.n	8006236 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fa2a 	bl	800663e <USBD_CtlError>
        err++;
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	3301      	adds	r3, #1
 80061ee:	72fb      	strb	r3, [r7, #11]
      break;
 80061f0:	e021      	b.n	8006236 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	7c1b      	ldrb	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10d      	bne.n	8006216 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	f107 0208 	add.w	r2, r7, #8
 8006206:	4610      	mov	r0, r2
 8006208:	4798      	blx	r3
 800620a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3301      	adds	r3, #1
 8006210:	2207      	movs	r2, #7
 8006212:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006214:	e00f      	b.n	8006236 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fa10 	bl	800663e <USBD_CtlError>
        err++;
 800621e:	7afb      	ldrb	r3, [r7, #11]
 8006220:	3301      	adds	r3, #1
 8006222:	72fb      	strb	r3, [r7, #11]
      break;
 8006224:	e007      	b.n	8006236 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fa08 	bl	800663e <USBD_CtlError>
      err++;
 800622e:	7afb      	ldrb	r3, [r7, #11]
 8006230:	3301      	adds	r3, #1
 8006232:	72fb      	strb	r3, [r7, #11]
      break;
 8006234:	bf00      	nop
  }

  if (err != 0U)
 8006236:	7afb      	ldrb	r3, [r7, #11]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d11e      	bne.n	800627a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	88db      	ldrh	r3, [r3, #6]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d016      	beq.n	8006272 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006244:	893b      	ldrh	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00e      	beq.n	8006268 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	88da      	ldrh	r2, [r3, #6]
 800624e:	893b      	ldrh	r3, [r7, #8]
 8006250:	4293      	cmp	r3, r2
 8006252:	bf28      	it	cs
 8006254:	4613      	movcs	r3, r2
 8006256:	b29b      	uxth	r3, r3
 8006258:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800625a:	893b      	ldrh	r3, [r7, #8]
 800625c:	461a      	mov	r2, r3
 800625e:	68f9      	ldr	r1, [r7, #12]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fa5d 	bl	8006720 <USBD_CtlSendData>
 8006266:	e009      	b.n	800627c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f9e7 	bl	800663e <USBD_CtlError>
 8006270:	e004      	b.n	800627c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 faae 	bl	80067d4 <USBD_CtlSendStatus>
 8006278:	e000      	b.n	800627c <USBD_GetDescriptor+0x2cc>
    return;
 800627a:	bf00      	nop
  }
}
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop

08006284 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	889b      	ldrh	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d131      	bne.n	80062fa <USBD_SetAddress+0x76>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	88db      	ldrh	r3, [r3, #6]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d12d      	bne.n	80062fa <USBD_SetAddress+0x76>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	885b      	ldrh	r3, [r3, #2]
 80062a2:	2b7f      	cmp	r3, #127	; 0x7f
 80062a4:	d829      	bhi.n	80062fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	885b      	ldrh	r3, [r3, #2]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d104      	bne.n	80062c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f9bc 	bl	800663e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c6:	e01d      	b.n	8006304 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	7bfa      	ldrb	r2, [r7, #15]
 80062cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fe6d 	bl	8006fb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa7a 	bl	80067d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d004      	beq.n	80062f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ee:	e009      	b.n	8006304 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f8:	e004      	b.n	8006304 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f99e 	bl	800663e <USBD_CtlError>
  }
}
 8006302:	bf00      	nop
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	885b      	ldrh	r3, [r3, #2]
 800631e:	b2da      	uxtb	r2, r3
 8006320:	4b4e      	ldr	r3, [pc, #312]	; (800645c <USBD_SetConfig+0x150>)
 8006322:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006324:	4b4d      	ldr	r3, [pc, #308]	; (800645c <USBD_SetConfig+0x150>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d905      	bls.n	8006338 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f985 	bl	800663e <USBD_CtlError>
    return USBD_FAIL;
 8006334:	2303      	movs	r3, #3
 8006336:	e08c      	b.n	8006452 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d002      	beq.n	800634a <USBD_SetConfig+0x3e>
 8006344:	2b03      	cmp	r3, #3
 8006346:	d029      	beq.n	800639c <USBD_SetConfig+0x90>
 8006348:	e075      	b.n	8006436 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800634a:	4b44      	ldr	r3, [pc, #272]	; (800645c <USBD_SetConfig+0x150>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d020      	beq.n	8006394 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006352:	4b42      	ldr	r3, [pc, #264]	; (800645c <USBD_SetConfig+0x150>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800635c:	4b3f      	ldr	r3, [pc, #252]	; (800645c <USBD_SetConfig+0x150>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fe ffe7 	bl	8005336 <USBD_SetClassConfig>
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d008      	beq.n	8006384 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f962 	bl	800663e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2202      	movs	r2, #2
 800637e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006382:	e065      	b.n	8006450 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fa25 	bl	80067d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2203      	movs	r2, #3
 800638e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006392:	e05d      	b.n	8006450 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fa1d 	bl	80067d4 <USBD_CtlSendStatus>
      break;
 800639a:	e059      	b.n	8006450 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800639c:	4b2f      	ldr	r3, [pc, #188]	; (800645c <USBD_SetConfig+0x150>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d112      	bne.n	80063ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80063ac:	4b2b      	ldr	r3, [pc, #172]	; (800645c <USBD_SetConfig+0x150>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80063b6:	4b29      	ldr	r3, [pc, #164]	; (800645c <USBD_SetConfig+0x150>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7fe ffd6 	bl	800536e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fa06 	bl	80067d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80063c8:	e042      	b.n	8006450 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80063ca:	4b24      	ldr	r3, [pc, #144]	; (800645c <USBD_SetConfig+0x150>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d02a      	beq.n	800642e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7fe ffc4 	bl	800536e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80063e6:	4b1d      	ldr	r3, [pc, #116]	; (800645c <USBD_SetConfig+0x150>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80063f0:	4b1a      	ldr	r3, [pc, #104]	; (800645c <USBD_SetConfig+0x150>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fe ff9d 	bl	8005336 <USBD_SetClassConfig>
 80063fc:	4603      	mov	r3, r0
 80063fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00f      	beq.n	8006426 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f918 	bl	800663e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fe ffa9 	bl	800536e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006424:	e014      	b.n	8006450 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f9d4 	bl	80067d4 <USBD_CtlSendStatus>
      break;
 800642c:	e010      	b.n	8006450 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f9d0 	bl	80067d4 <USBD_CtlSendStatus>
      break;
 8006434:	e00c      	b.n	8006450 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f900 	bl	800663e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800643e:	4b07      	ldr	r3, [pc, #28]	; (800645c <USBD_SetConfig+0x150>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fe ff92 	bl	800536e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800644a:	2303      	movs	r3, #3
 800644c:	73fb      	strb	r3, [r7, #15]
      break;
 800644e:	bf00      	nop
  }

  return ret;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000170 	.word	0x20000170

08006460 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	88db      	ldrh	r3, [r3, #6]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d004      	beq.n	800647c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f8e2 	bl	800663e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800647a:	e023      	b.n	80064c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	dc02      	bgt.n	800648e <USBD_GetConfig+0x2e>
 8006488:	2b00      	cmp	r3, #0
 800648a:	dc03      	bgt.n	8006494 <USBD_GetConfig+0x34>
 800648c:	e015      	b.n	80064ba <USBD_GetConfig+0x5a>
 800648e:	2b03      	cmp	r3, #3
 8006490:	d00b      	beq.n	80064aa <USBD_GetConfig+0x4a>
 8006492:	e012      	b.n	80064ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3308      	adds	r3, #8
 800649e:	2201      	movs	r2, #1
 80064a0:	4619      	mov	r1, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f93c 	bl	8006720 <USBD_CtlSendData>
        break;
 80064a8:	e00c      	b.n	80064c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3304      	adds	r3, #4
 80064ae:	2201      	movs	r2, #1
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f934 	bl	8006720 <USBD_CtlSendData>
        break;
 80064b8:	e004      	b.n	80064c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f8be 	bl	800663e <USBD_CtlError>
        break;
 80064c2:	bf00      	nop
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d81e      	bhi.n	8006522 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	88db      	ldrh	r3, [r3, #6]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d004      	beq.n	80064f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f8a5 	bl	800663e <USBD_CtlError>
        break;
 80064f4:	e01a      	b.n	800652c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006502:	2b00      	cmp	r3, #0
 8006504:	d005      	beq.n	8006512 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f043 0202 	orr.w	r2, r3, #2
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	330c      	adds	r3, #12
 8006516:	2202      	movs	r2, #2
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f900 	bl	8006720 <USBD_CtlSendData>
      break;
 8006520:	e004      	b.n	800652c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f88a 	bl	800663e <USBD_CtlError>
      break;
 800652a:	bf00      	nop
  }
}
 800652c:	bf00      	nop
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	885b      	ldrh	r3, [r3, #2]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d107      	bne.n	8006556 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f940 	bl	80067d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006554:	e013      	b.n	800657e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	885b      	ldrh	r3, [r3, #2]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d10b      	bne.n	8006576 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	889b      	ldrh	r3, [r3, #4]
 8006562:	0a1b      	lsrs	r3, r3, #8
 8006564:	b29b      	uxth	r3, r3
 8006566:	b2da      	uxtb	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f930 	bl	80067d4 <USBD_CtlSendStatus>
}
 8006574:	e003      	b.n	800657e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f860 	bl	800663e <USBD_CtlError>
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006596:	b2db      	uxtb	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	2b02      	cmp	r3, #2
 800659c:	d80b      	bhi.n	80065b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	885b      	ldrh	r3, [r3, #2]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d10c      	bne.n	80065c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f910 	bl	80067d4 <USBD_CtlSendStatus>
      }
      break;
 80065b4:	e004      	b.n	80065c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f840 	bl	800663e <USBD_CtlError>
      break;
 80065be:	e000      	b.n	80065c2 <USBD_ClrFeature+0x3c>
      break;
 80065c0:	bf00      	nop
  }
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	781a      	ldrb	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	781a      	ldrb	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff fa41 	bl	8005a7c <SWAPBYTE>
 80065fa:	4603      	mov	r3, r0
 80065fc:	461a      	mov	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3301      	adds	r3, #1
 8006606:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3301      	adds	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f7ff fa34 	bl	8005a7c <SWAPBYTE>
 8006614:	4603      	mov	r3, r0
 8006616:	461a      	mov	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3301      	adds	r3, #1
 8006620:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3301      	adds	r3, #1
 8006626:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f7ff fa27 	bl	8005a7c <SWAPBYTE>
 800662e:	4603      	mov	r3, r0
 8006630:	461a      	mov	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	80da      	strh	r2, [r3, #6]
}
 8006636:	bf00      	nop
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b082      	sub	sp, #8
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006648:	2180      	movs	r1, #128	; 0x80
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fc48 	bl	8006ee0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006650:	2100      	movs	r1, #0
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fc44 	bl	8006ee0 <USBD_LL_StallEP>
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d036      	beq.n	80066e4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800667a:	6938      	ldr	r0, [r7, #16]
 800667c:	f000 f836 	bl	80066ec <USBD_GetLen>
 8006680:	4603      	mov	r3, r0
 8006682:	3301      	adds	r3, #1
 8006684:	b29b      	uxth	r3, r3
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	b29a      	uxth	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	4413      	add	r3, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	7812      	ldrb	r2, [r2, #0]
 8006698:	701a      	strb	r2, [r3, #0]
  idx++;
 800669a:	7dfb      	ldrb	r3, [r7, #23]
 800669c:	3301      	adds	r3, #1
 800669e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	4413      	add	r3, r2
 80066a6:	2203      	movs	r2, #3
 80066a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
 80066ac:	3301      	adds	r3, #1
 80066ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80066b0:	e013      	b.n	80066da <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80066b2:	7dfb      	ldrb	r3, [r7, #23]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	4413      	add	r3, r2
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	7812      	ldrb	r2, [r2, #0]
 80066bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	3301      	adds	r3, #1
 80066c2:	613b      	str	r3, [r7, #16]
    idx++;
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
 80066c6:	3301      	adds	r3, #1
 80066c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	4413      	add	r3, r2
 80066d0:	2200      	movs	r2, #0
 80066d2:	701a      	strb	r2, [r3, #0]
    idx++;
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
 80066d6:	3301      	adds	r3, #1
 80066d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e7      	bne.n	80066b2 <USBD_GetString+0x52>
 80066e2:	e000      	b.n	80066e6 <USBD_GetString+0x86>
    return;
 80066e4:	bf00      	nop
  }
}
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80066fc:	e005      	b.n	800670a <USBD_GetLen+0x1e>
  {
    len++;
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	3301      	adds	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	3301      	adds	r3, #1
 8006708:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f5      	bne.n	80066fe <USBD_GetLen+0x12>
  }

  return len;
 8006712:	7bfb      	ldrb	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2202      	movs	r2, #2
 8006730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	2100      	movs	r1, #0
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 fc53 	bl	8006ff2 <USBD_LL_Transmit>

  return USBD_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	2100      	movs	r1, #0
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 fc42 	bl	8006ff2 <USBD_LL_Transmit>

  return USBD_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2203      	movs	r2, #3
 8006788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	2100      	movs	r1, #0
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 fc46 	bl	8007034 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	2100      	movs	r1, #0
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fc35 	bl	8007034 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2204      	movs	r2, #4
 80067e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80067e4:	2300      	movs	r3, #0
 80067e6:	2200      	movs	r2, #0
 80067e8:	2100      	movs	r1, #0
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fc01 	bl	8006ff2 <USBD_LL_Transmit>

  return USBD_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2205      	movs	r2, #5
 8006806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800680a:	2300      	movs	r3, #0
 800680c:	2200      	movs	r2, #0
 800680e:	2100      	movs	r1, #0
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fc0f 	bl	8007034 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006824:	2200      	movs	r2, #0
 8006826:	4912      	ldr	r1, [pc, #72]	; (8006870 <MX_USB_DEVICE_Init+0x50>)
 8006828:	4812      	ldr	r0, [pc, #72]	; (8006874 <MX_USB_DEVICE_Init+0x54>)
 800682a:	f7fe fd07 	bl	800523c <USBD_Init>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006834:	f7f9 ff6b 	bl	800070e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006838:	490f      	ldr	r1, [pc, #60]	; (8006878 <MX_USB_DEVICE_Init+0x58>)
 800683a:	480e      	ldr	r0, [pc, #56]	; (8006874 <MX_USB_DEVICE_Init+0x54>)
 800683c:	f7fe fd2e 	bl	800529c <USBD_RegisterClass>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006846:	f7f9 ff62 	bl	800070e <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800684a:	490c      	ldr	r1, [pc, #48]	; (800687c <MX_USB_DEVICE_Init+0x5c>)
 800684c:	4809      	ldr	r0, [pc, #36]	; (8006874 <MX_USB_DEVICE_Init+0x54>)
 800684e:	f7fe fcdb 	bl	8005208 <USBD_CUSTOM_HID_RegisterInterface>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006858:	f7f9 ff59 	bl	800070e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800685c:	4805      	ldr	r0, [pc, #20]	; (8006874 <MX_USB_DEVICE_Init+0x54>)
 800685e:	f7fe fd53 	bl	8005308 <USBD_Start>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006868:	f7f9 ff51 	bl	800070e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800686c:	bf00      	nop
 800686e:	bd80      	pop	{r7, pc}
 8006870:	200000b8 	.word	0x200000b8
 8006874:	20000174 	.word	0x20000174
 8006878:	2000000c 	.word	0x2000000c
 800687c:	200000a8 	.word	0x200000a8

08006880 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006884:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006886:	4618      	mov	r0, r3
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006894:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006896:	4618      	mov	r0, r3
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *inData)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
//  UNUSED(event_idx);
//  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 80068a8:	4806      	ldr	r0, [pc, #24]	; (80068c4 <CUSTOM_HID_OutEvent_FS+0x24>)
 80068aa:	f7fe fc4d 	bl	8005148 <USBD_CUSTOM_HID_ReceivePacket>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <CUSTOM_HID_OutEvent_FS+0x1a>
  {
    return -1;
 80068b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068b8:	e000      	b.n	80068bc <CUSTOM_HID_OutEvent_FS+0x1c>
  }

  return (USBD_OK);
 80068ba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20000174 	.word	0x20000174

080068c8 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 80068d4:	887b      	ldrh	r3, [r7, #2]
 80068d6:	461a      	mov	r2, r3
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4804      	ldr	r0, [pc, #16]	; (80068ec <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 80068dc:	f7fe fb22 	bl	8004f24 <USBD_CUSTOM_HID_SendReport>
 80068e0:	4603      	mov	r3, r0
 80068e2:	b25b      	sxtb	r3, r3
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	20000174 	.word	0x20000174

080068f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	6039      	str	r1, [r7, #0]
 80068fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2212      	movs	r2, #18
 8006900:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006902:	4b03      	ldr	r3, [pc, #12]	; (8006910 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	200000d4 	.word	0x200000d4

08006914 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	6039      	str	r1, [r7, #0]
 800691e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2204      	movs	r2, #4
 8006924:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006926:	4b03      	ldr	r3, [pc, #12]	; (8006934 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	200000e8 	.word	0x200000e8

08006938 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	4603      	mov	r3, r0
 8006940:	6039      	str	r1, [r7, #0]
 8006942:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d105      	bne.n	8006956 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	4907      	ldr	r1, [pc, #28]	; (800696c <USBD_FS_ProductStrDescriptor+0x34>)
 800694e:	4808      	ldr	r0, [pc, #32]	; (8006970 <USBD_FS_ProductStrDescriptor+0x38>)
 8006950:	f7ff fe86 	bl	8006660 <USBD_GetString>
 8006954:	e004      	b.n	8006960 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	4904      	ldr	r1, [pc, #16]	; (800696c <USBD_FS_ProductStrDescriptor+0x34>)
 800695a:	4805      	ldr	r0, [pc, #20]	; (8006970 <USBD_FS_ProductStrDescriptor+0x38>)
 800695c:	f7ff fe80 	bl	8006660 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006960:	4b02      	ldr	r3, [pc, #8]	; (800696c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20000450 	.word	0x20000450
 8006970:	08007170 	.word	0x08007170

08006974 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	6039      	str	r1, [r7, #0]
 800697e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	4904      	ldr	r1, [pc, #16]	; (8006994 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006984:	4804      	ldr	r0, [pc, #16]	; (8006998 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006986:	f7ff fe6b 	bl	8006660 <USBD_GetString>
  return USBD_StrDesc;
 800698a:	4b02      	ldr	r3, [pc, #8]	; (8006994 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000450 	.word	0x20000450
 8006998:	08007190 	.word	0x08007190

0800699c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	6039      	str	r1, [r7, #0]
 80069a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	221a      	movs	r2, #26
 80069ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80069ae:	f000 f843 	bl	8006a38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80069b2:	4b02      	ldr	r3, [pc, #8]	; (80069bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	200000ec 	.word	0x200000ec

080069c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	4603      	mov	r3, r0
 80069c8:	6039      	str	r1, [r7, #0]
 80069ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d105      	bne.n	80069de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	4907      	ldr	r1, [pc, #28]	; (80069f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069d6:	4808      	ldr	r0, [pc, #32]	; (80069f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069d8:	f7ff fe42 	bl	8006660 <USBD_GetString>
 80069dc:	e004      	b.n	80069e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	4904      	ldr	r1, [pc, #16]	; (80069f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069e2:	4805      	ldr	r0, [pc, #20]	; (80069f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069e4:	f7ff fe3c 	bl	8006660 <USBD_GetString>
  }
  return USBD_StrDesc;
 80069e8:	4b02      	ldr	r3, [pc, #8]	; (80069f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000450 	.word	0x20000450
 80069f8:	080071a4 	.word	0x080071a4

080069fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	6039      	str	r1, [r7, #0]
 8006a06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d105      	bne.n	8006a1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	4907      	ldr	r1, [pc, #28]	; (8006a30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a12:	4808      	ldr	r0, [pc, #32]	; (8006a34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a14:	f7ff fe24 	bl	8006660 <USBD_GetString>
 8006a18:	e004      	b.n	8006a24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	4904      	ldr	r1, [pc, #16]	; (8006a30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a1e:	4805      	ldr	r0, [pc, #20]	; (8006a34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a20:	f7ff fe1e 	bl	8006660 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a24:	4b02      	ldr	r3, [pc, #8]	; (8006a30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20000450 	.word	0x20000450
 8006a34:	080071b8 	.word	0x080071b8

08006a38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a3e:	4b0f      	ldr	r3, [pc, #60]	; (8006a7c <Get_SerialNum+0x44>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a44:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <Get_SerialNum+0x48>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a4a:	4b0e      	ldr	r3, [pc, #56]	; (8006a84 <Get_SerialNum+0x4c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4413      	add	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d009      	beq.n	8006a72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a5e:	2208      	movs	r2, #8
 8006a60:	4909      	ldr	r1, [pc, #36]	; (8006a88 <Get_SerialNum+0x50>)
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f814 	bl	8006a90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a68:	2204      	movs	r2, #4
 8006a6a:	4908      	ldr	r1, [pc, #32]	; (8006a8c <Get_SerialNum+0x54>)
 8006a6c:	68b8      	ldr	r0, [r7, #8]
 8006a6e:	f000 f80f 	bl	8006a90 <IntToUnicode>
  }
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	1fff7a10 	.word	0x1fff7a10
 8006a80:	1fff7a14 	.word	0x1fff7a14
 8006a84:	1fff7a18 	.word	0x1fff7a18
 8006a88:	200000ee 	.word	0x200000ee
 8006a8c:	200000fe 	.word	0x200000fe

08006a90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	75fb      	strb	r3, [r7, #23]
 8006aa6:	e027      	b.n	8006af8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	0f1b      	lsrs	r3, r3, #28
 8006aac:	2b09      	cmp	r3, #9
 8006aae:	d80b      	bhi.n	8006ac8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	0f1b      	lsrs	r3, r3, #28
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	4619      	mov	r1, r3
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	440b      	add	r3, r1
 8006ac0:	3230      	adds	r2, #48	; 0x30
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	e00a      	b.n	8006ade <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	0f1b      	lsrs	r3, r3, #28
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	440b      	add	r3, r1
 8006ad8:	3237      	adds	r2, #55	; 0x37
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	3301      	adds	r3, #1
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	4413      	add	r3, r2
 8006aee:	2200      	movs	r2, #0
 8006af0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
 8006af4:	3301      	adds	r3, #1
 8006af6:	75fb      	strb	r3, [r7, #23]
 8006af8:	7dfa      	ldrb	r2, [r7, #23]
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d3d3      	bcc.n	8006aa8 <IntToUnicode+0x18>
  }
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
	...

08006b10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b18:	f107 0314 	add.w	r3, r7, #20
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	605a      	str	r2, [r3, #4]
 8006b22:	609a      	str	r2, [r3, #8]
 8006b24:	60da      	str	r2, [r3, #12]
 8006b26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b30:	d13a      	bne.n	8006ba8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b32:	2300      	movs	r3, #0
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	4b1e      	ldr	r3, [pc, #120]	; (8006bb0 <HAL_PCD_MspInit+0xa0>)
 8006b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3a:	4a1d      	ldr	r2, [pc, #116]	; (8006bb0 <HAL_PCD_MspInit+0xa0>)
 8006b3c:	f043 0301 	orr.w	r3, r3, #1
 8006b40:	6313      	str	r3, [r2, #48]	; 0x30
 8006b42:	4b1b      	ldr	r3, [pc, #108]	; (8006bb0 <HAL_PCD_MspInit+0xa0>)
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b54:	2302      	movs	r3, #2
 8006b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b60:	230a      	movs	r3, #10
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b64:	f107 0314 	add.w	r3, r7, #20
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4812      	ldr	r0, [pc, #72]	; (8006bb4 <HAL_PCD_MspInit+0xa4>)
 8006b6c:	f7fa f83c 	bl	8000be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b70:	4b0f      	ldr	r3, [pc, #60]	; (8006bb0 <HAL_PCD_MspInit+0xa0>)
 8006b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b74:	4a0e      	ldr	r2, [pc, #56]	; (8006bb0 <HAL_PCD_MspInit+0xa0>)
 8006b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b7a:	6353      	str	r3, [r2, #52]	; 0x34
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <HAL_PCD_MspInit+0xa0>)
 8006b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b84:	4a0a      	ldr	r2, [pc, #40]	; (8006bb0 <HAL_PCD_MspInit+0xa0>)
 8006b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b8a:	6453      	str	r3, [r2, #68]	; 0x44
 8006b8c:	4b08      	ldr	r3, [pc, #32]	; (8006bb0 <HAL_PCD_MspInit+0xa0>)
 8006b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	2043      	movs	r0, #67	; 0x43
 8006b9e:	f7f9 fff9 	bl	8000b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006ba2:	2043      	movs	r0, #67	; 0x43
 8006ba4:	f7fa f812 	bl	8000bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ba8:	bf00      	nop
 8006baa:	3728      	adds	r7, #40	; 0x28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	40020000 	.word	0x40020000

08006bb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4610      	mov	r0, r2
 8006bd0:	f7fe fbe7 	bl	80053a2 <USBD_LL_SetupStage>
}
 8006bd4:	bf00      	nop
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006bee:	78fa      	ldrb	r2, [r7, #3]
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	440b      	add	r3, r1
 8006bfc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	4619      	mov	r1, r3
 8006c06:	f7fe fc21 	bl	800544c <USBD_LL_DataOutStage>
}
 8006c0a:	bf00      	nop
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	334c      	adds	r3, #76	; 0x4c
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f7fe fcba 	bl	80055b2 <USBD_LL_DataInStage>
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe fdee 	bl	8005836 <USBD_LL_SOF>
}
 8006c5a:	bf00      	nop
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d001      	beq.n	8006c7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006c76:	f7f9 fd4a 	bl	800070e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c80:	7bfa      	ldrb	r2, [r7, #15]
 8006c82:	4611      	mov	r1, r2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fe fd98 	bl	80057ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fe fd40 	bl	8005716 <USBD_LL_Reset>
}
 8006c96:	bf00      	nop
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe fd93 	bl	80057da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6812      	ldr	r2, [r2, #0]
 8006cc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cc6:	f043 0301 	orr.w	r3, r3, #1
 8006cca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006cd4:	4b04      	ldr	r3, [pc, #16]	; (8006ce8 <HAL_PCD_SuspendCallback+0x48>)
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	4a03      	ldr	r2, [pc, #12]	; (8006ce8 <HAL_PCD_SuspendCallback+0x48>)
 8006cda:	f043 0306 	orr.w	r3, r3, #6
 8006cde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	e000ed00 	.word	0xe000ed00

08006cec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe fd83 	bl	8005806 <USBD_LL_Resume>
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d1a:	78fa      	ldrb	r2, [r7, #3]
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fddb 	bl	80058da <USBD_LL_IsoOUTIncomplete>
}
 8006d24:	bf00      	nop
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d3e:	78fa      	ldrb	r2, [r7, #3]
 8006d40:	4611      	mov	r1, r2
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe fd97 	bl	8005876 <USBD_LL_IsoINIncomplete>
}
 8006d48:	bf00      	nop
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fded 	bl	800593e <USBD_LL_DevConnected>
}
 8006d64:	bf00      	nop
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe fdea 	bl	8005954 <USBD_LL_DevDisconnected>
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d13c      	bne.n	8006e12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006d98:	4a20      	ldr	r2, [pc, #128]	; (8006e1c <USBD_LL_Init+0x94>)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a1e      	ldr	r2, [pc, #120]	; (8006e1c <USBD_LL_Init+0x94>)
 8006da4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006da8:	4b1c      	ldr	r3, [pc, #112]	; (8006e1c <USBD_LL_Init+0x94>)
 8006daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006dae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006db0:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <USBD_LL_Init+0x94>)
 8006db2:	2204      	movs	r2, #4
 8006db4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006db6:	4b19      	ldr	r3, [pc, #100]	; (8006e1c <USBD_LL_Init+0x94>)
 8006db8:	2202      	movs	r2, #2
 8006dba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006dbc:	4b17      	ldr	r3, [pc, #92]	; (8006e1c <USBD_LL_Init+0x94>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006dc2:	4b16      	ldr	r3, [pc, #88]	; (8006e1c <USBD_LL_Init+0x94>)
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006dc8:	4b14      	ldr	r3, [pc, #80]	; (8006e1c <USBD_LL_Init+0x94>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006dce:	4b13      	ldr	r3, [pc, #76]	; (8006e1c <USBD_LL_Init+0x94>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006dd4:	4b11      	ldr	r3, [pc, #68]	; (8006e1c <USBD_LL_Init+0x94>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006dda:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <USBD_LL_Init+0x94>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006de0:	4b0e      	ldr	r3, [pc, #56]	; (8006e1c <USBD_LL_Init+0x94>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006de6:	480d      	ldr	r0, [pc, #52]	; (8006e1c <USBD_LL_Init+0x94>)
 8006de8:	f7fa f8b3 	bl	8000f52 <HAL_PCD_Init>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006df2:	f7f9 fc8c 	bl	800070e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006df6:	2180      	movs	r1, #128	; 0x80
 8006df8:	4808      	ldr	r0, [pc, #32]	; (8006e1c <USBD_LL_Init+0x94>)
 8006dfa:	f7fb faf2 	bl	80023e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006dfe:	2240      	movs	r2, #64	; 0x40
 8006e00:	2100      	movs	r1, #0
 8006e02:	4806      	ldr	r0, [pc, #24]	; (8006e1c <USBD_LL_Init+0x94>)
 8006e04:	f7fb faa6 	bl	8002354 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006e08:	2280      	movs	r2, #128	; 0x80
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	4803      	ldr	r0, [pc, #12]	; (8006e1c <USBD_LL_Init+0x94>)
 8006e0e:	f7fb faa1 	bl	8002354 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20000650 	.word	0x20000650

08006e20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fa f9a8 	bl	800118c <HAL_PCD_Start>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f930 	bl	80070a8 <USBD_Get_USB_Status>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	4608      	mov	r0, r1
 8006e60:	4611      	mov	r1, r2
 8006e62:	461a      	mov	r2, r3
 8006e64:	4603      	mov	r3, r0
 8006e66:	70fb      	strb	r3, [r7, #3]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70bb      	strb	r3, [r7, #2]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006e7e:	78bb      	ldrb	r3, [r7, #2]
 8006e80:	883a      	ldrh	r2, [r7, #0]
 8006e82:	78f9      	ldrb	r1, [r7, #3]
 8006e84:	f7fa fe79 	bl	8001b7a <HAL_PCD_EP_Open>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 f90a 	bl	80070a8 <USBD_Get_USB_Status>
 8006e94:	4603      	mov	r3, r0
 8006e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	460b      	mov	r3, r1
 8006eac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ebc:	78fa      	ldrb	r2, [r7, #3]
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fa fec2 	bl	8001c4a <HAL_PCD_EP_Close>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 f8eb 	bl	80070a8 <USBD_Get_USB_Status>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006efa:	78fa      	ldrb	r2, [r7, #3]
 8006efc:	4611      	mov	r1, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fa ff82 	bl	8001e08 <HAL_PCD_EP_SetStall>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 f8cc 	bl	80070a8 <USBD_Get_USB_Status>
 8006f10:	4603      	mov	r3, r0
 8006f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	460b      	mov	r3, r1
 8006f28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f38:	78fa      	ldrb	r2, [r7, #3]
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fa ffc7 	bl	8001ed0 <HAL_PCD_EP_ClrStall>
 8006f42:	4603      	mov	r3, r0
 8006f44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 f8ad 	bl	80070a8 <USBD_Get_USB_Status>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f52:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	da0b      	bge.n	8006f90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f7e:	68f9      	ldr	r1, [r7, #12]
 8006f80:	4613      	mov	r3, r2
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	4413      	add	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	333e      	adds	r3, #62	; 0x3e
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	e00b      	b.n	8006fa8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f90:	78fb      	ldrb	r3, [r7, #3]
 8006f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f96:	68f9      	ldr	r1, [r7, #12]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006fa6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006fce:	78fa      	ldrb	r2, [r7, #3]
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fa fdac 	bl	8001b30 <HAL_PCD_SetAddress>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f862 	bl	80070a8 <USBD_Get_USB_Status>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b086      	sub	sp, #24
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	460b      	mov	r3, r1
 8007000:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007010:	7af9      	ldrb	r1, [r7, #11]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	f7fa fead 	bl	8001d74 <HAL_PCD_EP_Transmit>
 800701a:	4603      	mov	r3, r0
 800701c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	4618      	mov	r0, r3
 8007022:	f000 f841 	bl	80070a8 <USBD_Get_USB_Status>
 8007026:	4603      	mov	r3, r0
 8007028:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800702a:	7dbb      	ldrb	r3, [r7, #22]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	607a      	str	r2, [r7, #4]
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	460b      	mov	r3, r1
 8007042:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007052:	7af9      	ldrb	r1, [r7, #11]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	f7fa fe41 	bl	8001cde <HAL_PCD_EP_Receive>
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007060:	7dfb      	ldrb	r3, [r7, #23]
 8007062:	4618      	mov	r0, r3
 8007064:	f000 f820 	bl	80070a8 <USBD_Get_USB_Status>
 8007068:	4603      	mov	r3, r0
 800706a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800706c:	7dbb      	ldrb	r3, [r7, #22]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007080:	4b03      	ldr	r3, [pc, #12]	; (8007090 <USBD_static_malloc+0x18>)
}
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	20000b5c 	.word	0x20000b5c

08007094 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]

}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80070b6:	79fb      	ldrb	r3, [r7, #7]
 80070b8:	2b03      	cmp	r3, #3
 80070ba:	d817      	bhi.n	80070ec <USBD_Get_USB_Status+0x44>
 80070bc:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <USBD_Get_USB_Status+0x1c>)
 80070be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c2:	bf00      	nop
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	080070db 	.word	0x080070db
 80070cc:	080070e1 	.word	0x080070e1
 80070d0:	080070e7 	.word	0x080070e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	73fb      	strb	r3, [r7, #15]
    break;
 80070d8:	e00b      	b.n	80070f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070da:	2303      	movs	r3, #3
 80070dc:	73fb      	strb	r3, [r7, #15]
    break;
 80070de:	e008      	b.n	80070f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070e0:	2301      	movs	r3, #1
 80070e2:	73fb      	strb	r3, [r7, #15]
    break;
 80070e4:	e005      	b.n	80070f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070e6:	2303      	movs	r3, #3
 80070e8:	73fb      	strb	r3, [r7, #15]
    break;
 80070ea:	e002      	b.n	80070f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80070ec:	2303      	movs	r3, #3
 80070ee:	73fb      	strb	r3, [r7, #15]
    break;
 80070f0:	bf00      	nop
  }
  return usb_status;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <__libc_init_array>:
 8007100:	b570      	push	{r4, r5, r6, lr}
 8007102:	4d0d      	ldr	r5, [pc, #52]	; (8007138 <__libc_init_array+0x38>)
 8007104:	4c0d      	ldr	r4, [pc, #52]	; (800713c <__libc_init_array+0x3c>)
 8007106:	1b64      	subs	r4, r4, r5
 8007108:	10a4      	asrs	r4, r4, #2
 800710a:	2600      	movs	r6, #0
 800710c:	42a6      	cmp	r6, r4
 800710e:	d109      	bne.n	8007124 <__libc_init_array+0x24>
 8007110:	4d0b      	ldr	r5, [pc, #44]	; (8007140 <__libc_init_array+0x40>)
 8007112:	4c0c      	ldr	r4, [pc, #48]	; (8007144 <__libc_init_array+0x44>)
 8007114:	f000 f820 	bl	8007158 <_init>
 8007118:	1b64      	subs	r4, r4, r5
 800711a:	10a4      	asrs	r4, r4, #2
 800711c:	2600      	movs	r6, #0
 800711e:	42a6      	cmp	r6, r4
 8007120:	d105      	bne.n	800712e <__libc_init_array+0x2e>
 8007122:	bd70      	pop	{r4, r5, r6, pc}
 8007124:	f855 3b04 	ldr.w	r3, [r5], #4
 8007128:	4798      	blx	r3
 800712a:	3601      	adds	r6, #1
 800712c:	e7ee      	b.n	800710c <__libc_init_array+0xc>
 800712e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007132:	4798      	blx	r3
 8007134:	3601      	adds	r6, #1
 8007136:	e7f2      	b.n	800711e <__libc_init_array+0x1e>
 8007138:	080071f0 	.word	0x080071f0
 800713c:	080071f0 	.word	0x080071f0
 8007140:	080071f0 	.word	0x080071f0
 8007144:	080071f4 	.word	0x080071f4

08007148 <memset>:
 8007148:	4402      	add	r2, r0
 800714a:	4603      	mov	r3, r0
 800714c:	4293      	cmp	r3, r2
 800714e:	d100      	bne.n	8007152 <memset+0xa>
 8007150:	4770      	bx	lr
 8007152:	f803 1b01 	strb.w	r1, [r3], #1
 8007156:	e7f9      	b.n	800714c <memset+0x4>

08007158 <_init>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	bf00      	nop
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr

08007164 <_fini>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	bf00      	nop
 8007168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716a:	bc08      	pop	{r3}
 800716c:	469e      	mov	lr, r3
 800716e:	4770      	bx	lr
